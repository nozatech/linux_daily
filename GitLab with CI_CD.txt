GitLab with CI/CD

--------------------------------------------------------------------------------
GitLab provides a broad set of functionality: 

	- issue tracking 
	- git repositories 
	- continuous integration 
	- container registry 
	- deployment 
	- monitoring 
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

CI Runners 	<= The components that run the automated tests		
			<= are the servers that check out the code and run automated tests to validate new changes

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

CloudFlare DNS Record			
https://gitlab.namcowireless.com
root/Passwd
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
GitLab(CI/CD) Setup
--------------------------------------------------------------------------------


1. GitLab install on Ubuntu 16.04 

sudo apt-get update
sudo apt-get install ca-certificates curl openssh-server postfix -y

curl -LO https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh && sudo bash script.deb.sh
wget     https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh && sudo bash script.deb.sh

sudo apt-get install gitlab-ce -y


2. Firewall Setup(UFW  <- Uncomplicated Firewall, is a front-end to iptables) 
https://www.digitalocean.com/community/tutorials/how-to-setup-a-firewall-with-ufw-on-an-ubuntu-and-debian-cloud-server

sudo ufw status
sudo ufw allow http
sudo ufw allow https
sudo ufw allow OpenSSH
sudo ufw status

3. Edit GitLab Config file
$ sudo nano /etc/gitlab/gitlab.rb
external_url 'https://gitlab.namcowireless.com'

letsencrypt['enable'] = true
letsencrypt['contact_emails'] = ['apark@bnga.com']

Bug: https://gitlab.com/gitlab-org/gitlab-ce/issues/43719
nginx['redirect_http_to_https'] = true
nginx['redirect_http_to_https'] = 80



$ gitlab-ctl reconfigure		
Synchronizing Cookbooks:
  - gitlab (0.0.1)
  - postgresql (0.1.0)
  - registry (0.1.0)
  - mattermost (0.1.0)
  - consul (0.0.0)
  - gitaly (0.1.0)
  - letsencrypt (0.1.0)
  - nginx (0.1.0)
  - runit (0.14.2)
  - package (0.1.0)
  - acme (3.1.0)
  - crond (0.1.0)
  - compat_resource (12.19.0)
  
https://docs.gitlab.com/omnibus/settings/logs.html
  # Tail logs in a console on the server
	# Tail all logs; press Ctrl-C to exit
	sudo gitlab-ctl tail

	# Drill down to a sub-directory of /var/log/gitlab
	sudo gitlab-ctl tail gitlab-rails

	# Drill down to an individual file
	sudo gitlab-ctl tail nginx/gitlab_error.log
	
  # Configure default log directories	
	# For example:
	gitlab_rails['log_directory'] = "/var/log/gitlab/gitlab-rails"
	unicorn['log_directory'] = "/var/log/gitlab/unicorn"
	registry['log_directory'] = "/var/log/gitlab/registry"
	
  
	
	
  
$ sudo gitlab-ctl status |start service-name | restart
run: alertmanager: (pid 15254) 71s; run: log: (pid 15266) 70s
run: crond: (pid 15336) 69s; run: log: (pid 15332) 69s
run: gitaly: (pid 15192) 72s; run: log: (pid 15201) 72s
run: gitlab-monitor: (pid 15209) 72s; run: log: (pid 15226) 71s
run: gitlab-workhorse: (pid 15172) 73s; run: log: (pid 15234) 71s
run: logrotate: (pid 14568) 144s; run: log: (pid 15185) 72s
run: nginx: (pid 14984) 99s; run: log: (pid 15235) 71s
run: node-exporter: (pid 14783) 132s; run: log: (pid 15202) 72s
run: postgres-exporter: (pid 15270) 70s; run: log: (pid 15277) 70s
run: postgresql: (pid 14256) 215s; run: log: (pid 15212) 72s
run: prometheus: (pid 15236) 71s; run: log: (pid 15245) 71s
run: redis: (pid 14191) 221s; run: log: (pid 15211) 72s
run: redis-exporter: (pid 14839) 119s; run: log: (pid 15227) 71s
run: sidekiq: (pid 14503) 168s; run: log: (pid 15165) 73s
run: unicorn: (pid 14465) 174s; run: log: (pid 15213) 72s

$ sudo gitlab-ctl start service-name
$ sudo gitlab-ctl restart

$ sudo gitlab-ctl reconfigure

### Free 'HTTPS' using Let's Encrypt ###
https://www.youtube.com/watch?v=ksqTu7TX83g


###############
### Ansible ###
###############
https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-16-04
sudo apt-add-repository ppa:ansible/ansible
sudo apt-get update
sudo apt-get install ansible
sudo vi /etc/ansible/hosts
-------------------------------------------
[k8]
k8_master    ansible_ssh_host=10.134.9.117  #
k8_worker-01 ansible_ssh_host=10.134.24.77  #
k8_worker-02 ansible_ssh_host=10.134.31.56  #
-------------------------------------------
# Setup Ansible connection 'user'
$ sudo vi /etc/ansible/group_vars/servers
-------------------------------------------
ansible_ssh_user: root
-------------------------------------------

# Install Python on all Remote server before ping from Ansible.
$ ssh root@10.134.9.117 apt-get install python -y
$ ssh root@10.134.24.77 apt-get install python -y
$ ssh root@10.134.31.56 apt-get install python -y

$ ansible -m ping all 
-------------------------------------------
k8_worker-01 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
k8_master | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
k8_worker-02 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
-------------------------------------------

$ ansible -m shell -a 'free -m' k8_master  <=remote hostname
k8_master | SUCCESS | rc=0 >>
              total        used        free      shared  buff/cache   available
Mem:            992          50         498           3         443         785
Swap:             0           0           0


##################
### Kubernetes ###
##################





Let's Encrypt on CentOS7 + GitLab
https://kb.yourwebhoster.eu/knowledge-base/secure-gitlab-with-lets-encrypt-on-centos-7/

$ mkdir -p /var/www/public/letsencrypt

$ vi /etc/gitlab/gitlab.rb

	# web_server['home'] = '/var/opt/gitlab/nginx'
	
	Add below this:
	-------------------------------------------------------------------
	nginx['custom_gitlab_server_config'] = "location ^~ /.well-known {
		root /var/www/public/letsencrypt;
	}"
	-------------------------------------------------------------------

$ gitlab-ctl reconfigure

# Request the Let’s encrypt certificate

	$ certbot certonly --webroot --webroot-path=/var/www/public/letsencrypt -d gitlab.namcowireless.com

	Saving debug log to /var/log/letsencrypt/letsencrypt.log
	Plugins selected: Authenticator webroot, Installer None
	Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org
	Obtaining a new certificate
	Performing the following challenges:
	http-01 challenge for gitlab.namcowireless.com
	Using the webroot path /var/www/public/letsencrypt for all unmatched domains.
	Waiting for verification...
	Cleaning up challenges

	IMPORTANT NOTES:
	 - Congratulations! Your certificate and chain have been saved at:
	   /etc/letsencrypt/live/gitlab.namcowireless.com/fullchain.pem
	   Your key file has been saved at:
	   /etc/letsencrypt/live/gitlab.namcowireless.com/privkey.pem
	   Your cert will expire on 2019-12-05. To obtain a new or tweaked
	   version of this certificate in the future, simply run certbot
	   again. To non-interactively renew *all* of your certificates, run
	   "certbot renew"
	 - If you like Certbot, please consider supporting our work by:

	   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
	   Donating to EFF:                    https://eff.org/donate-le

# Configure Gitlab with the new certificates

$ vi /etc/gitlab/gitlab.rb
	#external_url 'http://gitlab.example.com'
	external_url 'https://gitlab.namcowireless.com'


	# nginx['redirect_http_to_https'] = false
	nginx['redirect_http_to_https'] = true

	# nginx['ssl_certificate'] = "/etc/gitlab/ssl/#{node['fqdn']}.crt"
	# nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/#{node['fqdn']}.key"
	nginx['ssl_certificate'] = "/etc/letsencrypt/live/yourdomain.com/fullchain.pem"
	nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/yourdomain.com/privkey.pem"

Reconfigure gitlab for https
$ gitlab-ctl reconfigure


# Certificate renewal
The downside of Let’s encrypt is that a certificate is only valid for 90 days.
$ crontab -e
#0 2 1 * * /usr/bin/certbot renew --quiet --renew-hook "/usr/bin/gitlab-ctl restart nginx"
0 2 1 * * /usr/bin/certbot renew --renew-hook "/usr/bin/gitlab-ctl restart nginx" 2>&1 ~/certbot_renewal.log


cat /etc/letsencrypt/renewal/gitlab.namcowireless.com.conf
# renew_before_expiry = 30 days
version = 0.36.0
archive_dir = /etc/letsencrypt/archive/gitlab.namcowireless.com
cert = /etc/letsencrypt/live/gitlab.namcowireless.com/cert.pem
privkey = /etc/letsencrypt/live/gitlab.namcowireless.com/privkey.pem
chain = /etc/letsencrypt/live/gitlab.namcowireless.com/chain.pem
fullchain = /etc/letsencrypt/live/gitlab.namcowireless.com/fullchain.pem

# Options used in the renewal process
[renewalparams]
authenticator = webroot
account = 93b7dc9853a39e6b58dd74d7d85dad8f
webroot_path = /var/www/public/letsencrypt,
server = https://acme-v02.api.letsencrypt.org/directory
[[webroot_map]]
gitlab.namcowireless.com = /var/www/public/letsencrypt

