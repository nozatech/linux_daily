Go microservices with Docker and Docker images

Go (golang) 
	=> a general purpose, higher-level, imperative programming language.
	=> a programming language first developed at Google. It is a statically-typed language 
		with syntax loosely derived from C, but with additional features such as garbage collection, 
		type safety, some dynamic-typing capabilities, additional built-in types 
		(e.g., variable-length arrays and key-value maps), and a large standard library.

	Go programming language is simple to implement because, once it is compiled, it typically does 
	not require external libraries.
		
Golang Installation and Hello World
https://linuxize.com/post/how-to-install-go-on-centos-7/

$ wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
$ sha256sum go1.10.3.linux-amd64.tar.gz

# Use the tar command to extract the tarball to the /usr/local directory:
$ sudo tar -C  /usr/local         -xzf  go1.10.3.linux-amd64.tar.gz
		   -C, --directory=DIR	  -x extract, -z gzip, -f --file=ARCHIVE
$ export PATH=$PATH:/usr/local/go/bin
$ source ~/.bash_profile				<= load at login
#or# $ source ~/.bashrc					<= load at running shell

# Test
$ mkdir -p ~/go/src/hello
$ vi ~/go/src/hello/hello.go
----------------------------------------
package main

import "fmt"

func main() {
    fmt.Printf("Hello, World\n")
}
----------------------------------------
Build the hello.go file:
NOTe: You have to be in ~/go/src/hello directory first!!
$ go build ~/go/src/hello 
# hello build will be in $PWD instead of ~/go/src/hello 
$ cd ~/go/src/hello 
$ go build

$ pwd
	/home/apark/go/src/hello
$ go build
$ ls -l
total 1980
-rwxrwxr-x. 1 apark apark 2020012 Apr 22 14:51 hello	<= this is build	
-rw-rw-r--. 1 apark apark      78 Apr 22 14:44 hello.go

Run(Execute) the build
$ ./hello
	Hello, World		<= This is RESULT!
	
# Git Clone
$ git clone https://github.com/do-community/mux-go-api.git	


Building a Base Ubuntu Image	

$ vi ~/mux-go-api/Dockerfile.ubuntu	
#----------------------------------------
FROM ubuntu:18.04

RUN apt-get update -y \
  && apt-get install -y git gcc make golang-1.10

ENV GOROOT /usr/lib/go-1.10
ENV PATH $GOROOT/bin:$PATH
ENV GOPATH /root/go
ENV APIPATH /root/go/src/api

WORKDIR $APIPATH
COPY . .

RUN \ 
  go get -d -v \
  && go install -v \
  && go build

EXPOSE 3000
CMD ["./api"]
#----------------------------------------


$ docker build -f Dockerfile.ubuntu -t ubuntu .
		 -> build build image
			  -f specifies that you want to build from the Dockerfile.ubuntu file,
				 --file string   Name of the Dockerfile (Default is 'PATH/Dockerfile')
									-t, --tag list  name and optionally a tag in the 'name:tag' format
										 Tagging it with the name 'ubuntu'











$ docker build -f Dockerfile.golang -t golang .
			  -f --file string      Name of the Dockerfile (Default is 'PATH/Dockerfile')



#------------------------------------------------------------------------------------------------------------------------
1. Go Install on MAC OS
How To Install Go and Set Up a Local Programming Environment on macOS
https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-macos
#------------------------------------------------------------------------------------------------------------------------
Go was designed to have all three available at the same time: 
	1. fast compilation
	2. ease of programming
	3. efficient execution in production
	
	Go is a versatile programming language that can be used for many different programming projects, 
	it's particularly well suited for networking/distributed systems programs, and has earned a 
	reputation as "the language of the cloud." 

1. Open Mac OS Terminal using "Command+Space"
  # Installing Xcode #
	  $ xcode-select -p		<= Check if Xcode(IDE) is installed.
		=> /Library/Developer/CommandLineTools

	  $ xcode-select --install  

  # Installing and Setting Up Homebrew
  Homebrew is made with Ruby, so it will be modifying your computerâ€™s Ruby path. The 'curl' command pulls a script 
  from the specified URL. This script will explain what it will do and then pauses the process to prompt you to 
  confirm. This provides you with a lot of feedback on what the script is going to be doing to your system and 
  gives you the opportunity to verify the process.
	
	$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	
		ruby -e 		<= -e  Specifies script from command-line while telling Ruby not to search the rest
								of the arguments for a script file name.
		-f --fail 		<= the Terminal window to give no HTML document output on server errors.
		-s --silent		<= mutes curl so that it does not show the progress meter, and combined with the 
		-S --show-error	<= -S or --show-error flag it will ensure that curl shows an error message if it fails.
		-L --location	<= --location flag will tell curl to redo the request to a new place if the server 
							reports that the requested page has moved to a different location.




