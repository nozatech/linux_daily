sed

cat textFile.txt | sed s/fromOrginal/changedTo/ 1> changed_textFile.txt
cat textFile.txt | awk '/us/ {print $2}'		<= find starting with /us/ and Prints out 2nd field


https://www.shellscript.sh/
Command-line entries will be preceded by the Dollar sign ($)
$ PS1="$ " ; export PS1

$ echo '#!/bin/bash' > myScript.sh
$ echo 'echo Hello World' >> myScript.sh
$ chmod +x myScript.sh   (or chmod 755)
$ ./myScript.sh
Hellow World


if [ $(id -u) != "0" ]; then
    echo "You must be the superuser to run this script" >&2
    exit 1
fi


function home_space
{
    # Only the superuser can get this information

    if [ "$(id -u)" = "0" ]; then
        echo "<h2>Home directory space by user</h2>"
        echo "<pre>"
        echo "Bytes Directory"
            du -s /home/* | sort -nr
        echo "</pre>"
    fi

}   # end of home_space



### NCDU
 Text-based disk usage viewer
 https://centos.pkgs.org/7/epel-x86_64/ncdu-1.13-1.el7.x86_64.rpm.html
 
 CentOS7
 
-------------------------------------------------------------------------------------------
### Brace To Array to Reverse
-------------------------------------------------------------------------------------------
$ vi braceToArrayToRevers.sh
------------------------------------------------------------------------------------------
#!/bin/bash

# Creating Array
array=($(echo -e test{1..6}'\n'    | sed '/^[[:space:]]*$/d' | sed 's/ //g')) 

# Count number of index
noIndice=($(echo -e test{1..6}'\n' | sed '/^[[:space:]]*$/d' | sed 's/ //g' | wc -l))

# Cut in half and find out the middle index number
firstHalfArray=$(echo $(( noIndice / 2 )) )

# Prints 1st half of array
echo ${array[@]:0:$firstHalfArray}

# Prints 1st half REVERSE array
echo ${array[@]:0:$firstHalfArray} | rev 
-------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
#!/bin/bash
# User input name of index and quantity

read -p "Please type name of the index(e.g. test): "	indexName	# -p prompt
read -p "How many Index to create(e.g. 10): "           indexNumber

#read -p "Continue? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1

if [ -z $indexName ]; then 
	read -p "Please type name of the index(e.g. test): "		# -p prompt
	read index
fi

if [ -z $number ]; then 
	read -p "How many Index to create(e.g. 10): "
	read indexNumber 
fi

if [[ -n $index  &&  -n $number ]]; then 
	echo -e "You input \nIndex:$index \nNumber:$number"; 
fi



# Creating Array
array=($(eval echo $index{1..$number})) 

# Count number of index
noIndex=$(for i in $array[@]; do echo $i; done | wc -l)

# Cut in half and find out the middle index number
firstHalfArray=$(echo $(( noIndex / 2 )) )

# Prints 1st half of array
echo ${array[@]:0:$firstHalfArray}

# Prints 1st half REVERSE array
echo ${array[@]:0:$firstHalfArray} | rev 


-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
#!/bin/bash
# User input name of index and quantity

echo -n "Please type name of the index(e.g. test): "            # -p prompt
read indexName

echo -n "How many Index to create(e.g. 10): "
read indexNumber

if [ -z $indexName ]; then
        read -p "Please type name of the index(e.g. test): "
        read indexName
fi

if [ -z $indexNumber ]; then
        read -p "How many Index to create(e.g. 10): "
        read indexNumber
fi

if [[ -n $indexName  &&  -n $indexNumber ]]; then
        echo "You input Index:$indexName Number:$indexNumber";
fi


# Creating Array
array=($(eval echo $indexName{1..$indexNumber}))
echo "Here are the Array Indice: ${array[@]}"

# Count number of index
noIndex=$(for i in ${array[@]}; do echo $i; done | wc -l)
echo "Total number of Array index: $noIndex"

# Cut in half and find out the middle index number
firstHalfArray=$(echo $(( noIndex / 2 )) )
echo "Half of array index is: $firstHalfArray"

# Prints 1st half of array
echo "Here are the list of index"
echo ${array[@]:0:$firstHalfArray}


# Prints 1st half REVERSE array
echo "This needs to be worked as REVERSE, Alphbet got reversed too"
echo ${array[@]:0:$firstHalfArray} | rev

-------------------------------------------------------------------------------------------
### Using While Loop for user not entering index and number values
-------------------------------------------------------------------------------------------
#!/bin/bash
# User input name of index and quantity
func_name(){
        echo -n "Please type name of the index(e.g. test): "            # -p prompt
        read indexName
}
func_number(){
        echo -n "How many Index to create(e.g. 11): "
        read indexNumber
}

func_name
func_number

while true;
        do
                if [ -z $indexName ]; then
                echo "Calling func_name"
                        func_name
                fi

                if [ -z $indexNumber ]; then
                        echo "Calling func_number"
                        func_number
                fi


                if [[ -n $indexName  &&  -n $indexNumber ]]; then
                        echo "You input Index:$indexName Number:$indexNumber";
                fi

done


# Creating Array
array=($(eval echo $indexName{1..$indexNumber}))
echo "Here are the Array Indice: ${array[@]}"

# Count number of index
noIndex=$(for i in ${array[@]}; do echo $i; done | wc -l)
echo "Total number of Array index: $noIndex"

# Cut in half and find out the middle index number
firstHalfArray=$(echo $(( noIndex / 2 )) )
echo "Half of array index is: $firstHalfArray"

# Prints 1st half of array
echo "Here are the list of index"
echo ${array[@]:0:$firstHalfArray}


# Prints 1st half REVERSE array
echo "This needs to be worked as REVERSE, Alphbet got reversed too"
echo ${array[@]:0:$firstHalfArray} | rev
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

$ array=($(echo -e test{1..6}'\n' | sed 's/ //g'))
$ arrayFrontHalf=("${array[@]:0:2})  # first half array
  
  $ echo ${array[*]}
  $ echo ${array[@]}
    test1 test2 test3 test4 test5

  $ echo ${array[*]} | rev			<= reverse
  $ echo ${array[@]} | rev			<= reverse
    5tset 4tset 3tset 2tset 1tset
	
-------------------------------------------------------------------------------------------
$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.




-------------------------------------------------------------------------------------------
# While Loop
-------------------------------------------------------------------------------------------
#!/bin/bash
echo "What is your favorit animal?"
read answer

while [ "$answer" != dog ]
do
    echo "That answer is incorrect"
    echo please try again
    read answer
done
-------------------------------------------------------------------------------------------
$ who | while read user ter time; do echo $user has been on $term since $time; done
  root has been on since 2019-02-10 04:14
  root has been on since 2019-02-10 12:52 (192.168.190.1)

noza@localhost~/delme$who
root     tty1         2019-02-10 04:14
root     pts/0        2019-02-10 12:52 (192.168.190.1)
^ $user  ^

-------------------------------------------------------------------------------------------
# read
https://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html#sect_08_02_01

echo "foo bar baz" | read w1 w2 w3
echo $w1 - $w2 - $w3
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
