Flash Card
### Bash ###
1. special characters
(	<= parenthesis 
{ 	<= brace
| 	<= vertical bar
[	<= bracket
_	<= underscore 
:	<= colon
;	<= semicolon
*	<= asterisk
~ 	<= tilde
-	<= dash
-------------------------------------------------
() 	<= Tuple
[]	<= List
{}	<= Dictionary
-------------------------------------------------
Bash Comments
# Single line comment
: '
This is a
multi line
comment
'
-------------------------------------------------
SNS	<= Social Networking Service 
SMS	<= Short Message Service (Text Message)
MMS	<= Media Message Service (Video Message)
-------------------------------------------------
2. ParameterS
echo $0			<= script itself
echo $@ 		<= listing the arguments
echo $#			<= total No. of arguments
echo $?			<= shell exit status code
echo $$			<= Current shell PID
-------------------------------------------------
3. Back tic vs $()
$`command`		<= legacy
$(command)		<= Easier for nesting
$ lsal=$(ls -al)   
$ lsal="$(ls -al)"  
$ echo $lsal
-------------------------------------------------

4. Single and Double Quotes
x=1
$ echo $x		=> 1
$ echo "$x"     => 1	<= outputs variable
$ echo '$x'		=> $x   <= prints literally
$ echo $x '$x' "$x"		<= 1  $x  1


5. Combines 2 or more commands
---------------------------------------------------
A ; B 		<= Run A and then B, regardless of success of A
A && B 		<= Run B if A succeeded
A || B 		<= Run B if A failed
A & 		<= Run A in background.
------------------------------------------------------------------------------------------------------
cmd1 ; cmd2     		<= Do cmd1 first, then(;) cmd2(cmd1 has failed or not)
	$ sleep 5 ; ls -l

cmd1 & cmd2    			<= Do cmd1 and(&) cmd2 without waiting for cmd1 to finish
	$ sleep 4 & ls -l

cmd1 && cmd2   		    <= If cmd1 successful, run cmd2, otherwise skip.
cmd1 && cmd2 && cmd3    <= If cmd1 successful, run cmd2, run cmd3,  otherwise skip.

cmd1 || cmd2   		    <= If cmd1 failed, run cmd2, otherwise skip.
cmd1 || cmd2 || cmd3    <= If cmd1 failed, run cmd2, otherwise runs cmd3, otherwise skip.

6. BASH provides 3 types of 'Parameters': Strings, Integers, and Arrays

7. set -e  		<= Exit immediately if a command exits with a non-zero status.

8. 'whereis' everthing located at? 	     location and manual
   'which'   command is located at?      location

9. cat << EOF >> fileName.txt			<= Here document
   read -a octets <<< "$ipAddr"			<= Here string

10. for i in {21..30}; do echo "$i".; echo; done

11. sed -i 's/A/B/g' file_name		<='i'nsert 'g'lobal

12. pmstat iostat mpstat

13. $ hidden() { ls -a "$@" | grep '^\.'; }		<= hidden () is a function
	$ alias hid="ls -a | grep '^\.'"			<= alias	 

14. 

15.

16.

17.

18.

19.

20.

21.

22.

23.

24.

25.

26.

27.

28.

29.

30.


======================================================================================================
Bash scripting cheatsheet
https://devhints.io/bash
======================================================================================================
#!/usr/bin/env bash

NAME="Albert Park"
echo "Hello $NAME!"

CMD="$(ls -al)"		<= "$(for command)"
CMD=$(ls-al)
echo $CMD

### Variables
NAME="John"
echo $NAME
echo "$NAME"
echo "${NAME}!"

### String quotes outputs literally $
NAME="John"
echo "Hi $NAME"  #=> Hi John
echo 'Hi $NAME'  #=> Hi $NAME

Shell execution
echo "I'm in $(pwd)"
echo "I'm in `pwd`"


Shell execution
echo "I'm in $(pwd)"
echo "I'm in `pwd`"


{ } Brace expansion
echo {A,B}.js
=> A.js B.js
{A,B}		Same as A B
{A,B}.js	Same as A.js B.js
{1..5}		Same as 1 2 3 4 5


# Functions
get_name() {
  echo "John"
}

echo "You are $(get_name)"


# Conditionals
if [ -z "$string" ]; then
  echo "String is empty"
elif [ -n "$string" ]; then
  echo "String is not empty"
fi



#### Parameter expansions ####

Basics
name="John"
echo ${name}

echo ${name/J/S}    #=> "Sohn" (J->S substitution)
echo ${name:0:2}    #=> "jo" (slicing from front)
echo ${name::2}     #=> "jo" (slicing from front)
echo ${name::-1}    #=> "joh" (slicing from back)

length=2			#=> variable
echo ${name:0:length}  #=> "jo" Same as 'echo ${name:0:2}'

echo ${food:-Cake}  #=> $food or "Cake"

See: Parameter expansion

STR="/path/to/foo.cpp"
echo ${STR%.cpp}    # /path/to/foo  What is '%'???
echo ${STR%.cpp}.o  # /path/to/foo.o

echo ${STR##*.}     # cpp (extension)
echo ${STR##*/}     # foo.cpp (basepath)

echo ${STR#*/}      # path/to/foo.cpp
echo ${STR##*/}     # foo.cpp

echo ${STR/foo/bar} # /path/to/bar.cpp

STR="Hello world"
echo ${STR:6:5}   # "world"
echo ${STR:-5:5}  # "world"
SRC="/path/to/foo.cpp"
BASE=${STR##*/}   #=> "foo.cpp" (basepath)
DIR=${SRC%$BASE}  #=> "/path/to" (dirpath)

Length
${#FOO}	Length of $FO


Substrings
${FOO:0:3}	Substring (position, length)
${FOO:-3:3}	Substring from the right


Default values
${FOO:-val}	$FOO, or val if not set
${FOO:=val}	Set $FOO to val if not set
${FOO:+val}	val if $FOO is set
${FOO:?message}	Show error message and exit if $FOO is not set
The : is optional (eg, ${FOO=word} works)


























======================================================================================================
Vim scripting cheatsheet
https://devhints.io/vimscript
======================================================================================================





















































































































