How to use 'GIT'

---------------------------------------------
$ git status	
$ git add . 								<='-A' all, or a new file_name
$ git commit -m  "update message"
 # $ git commit -am "update message"  		<= -am is combo of git add . + commit -m
$ git commit --amend -m "Change message"
$ git push
------------------------------------------------------------------------------------------	

### Auto Color
	$ git config --global color.ui auto								<= output color
	$ git config --global color.branch auto
	$ git config --global color.status auto
	
	https://unix.stackexchange.com/questions/44266/how-to-colorize-output-of-git
		git config --global color.ui always
		git config --global color.branch always
		git config --global color.diff always
		git config --global color.interactive always
		git config --global color.status always
		git config --global color.grep always
		git config --global color.pager true
		git config --global color.decorate always
		git config --global color.showbranch always
	
------------------------------------------------------------------------------------------	
# To resolve \n and \r\n issue for  Linux and Windows 
------------------------------------------------------------------------------------------	
	\n		<= Linefeed	(Linux)  
	\r\n	<= Carriage Return <= (Windows)
# Remove '\r' from Windows baiss commit
$ git config core.autocrlf input		

------------------------------------------------------------------------------------------
		
Use HTTPS	https://github.com/nozatech/jenkins.git
Use SSH     git@github.com:nozatech/jenkins.git



------------------------------------------------------------------------------------------	
There are 3 levels of git config; project, global and system.
------------------------------------------------------------------------------------------	
project: Project configs are only available for the current project and stored in 
		 in the project's directory.
		.git/config 
		
		$ cat /home/apark/terraform/.git/config
		
global: Global configs are available for all projects for the current user and stored in 
		~/.gitconfig
		
		$ cat ~/.gitconfig
		[user]
        email = albertpark5@gmail.com
        name = albert park

system: System configs are available for all the users/projects and stored in 
		/etc/gitconfig
------------------------------------------------------------------------------------------
# Create a project specific config, you have to execute this under the project's directory:
------------------------------------------------------------------------------------------	
	# Project overrides > Global overrides > System.
	--------------------------------------------------------
	project specific config:
	--------------------------------------------------------
	$ mkdir git_project && cd ~/git_project

	$ git config user.name "John Doe" 

	--------------------------------------------------------
	# Create a global config:
	--------------------------------------------------------
	$ git config --global user.name "John Doe"

	--------------------------------------------------------
	# Create a system config:
	--------------------------------------------------------
	$ git config --system user.name "John Doe" 
	

--------------------------------------------------------	
…or create a new repository on the command line
--------------------------------------------------------
echo "# gitFolder" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/nozatech/gitFolder.git
git push -u origin master

--------------------------------------------------------
…or push an existing repository from the command line
--------------------------------------------------------
git remote add origin https://github.com/nozatech/gitFolder.git
git push -u origin master




------------------------------------------------------------------------------------------
# Remembering PW and ID for 3600sec(60mins)
------------------------------------------------------------------------------------------
#### Save ID and PW for 60mins ###
$ git config --global credential.helper 'cache --timeout=3600'
####

$ git config --list 
# $ git config -l		<= same

$ git config credential.helper store				<= 'store' in local home

$ git push https://github.com/nozatech/books.git
	
	Username: 
	Password: 
	
$ git help credentials				<= manual

# Password location
$ cat ~/.git-credentials
	https://userID:Password@github.com

$ cat ~/.gitconfig					<= User's home
	  [user]
        name = user_id
        email = email@gmail.com


------------------------------------------------------------------------------------------
### Global Git Config: User ID and Password Configuration Setup
There are 3 levels of git config; project, global and system.
https://stackoverflow.com/questions/12254076/how-do-i-show-my-global-git-config/46986031
------------------------------------------------------------------------------------------
1. Project:
			Repository level (specific to that single repository)
			Project configs are only available for the current project and stored in 
			>> .git/config <<

		
		$ git config --list --local										<= to view, 
		$ git config --local core.ignorecase true (--local optional) 	<= to set, 
		$ git config --edit --local (--local optional)					<= to edit repository config file,
		
		$ git config user.name "John Doe" 
	
2. Global: 
			Global configs are available for all projects for the current user and stored in 
			>> ~/.gitconfig <<
		$ git config --list --global 			<= to view,
		$ git config --global user.name xyz 	<= to set,
		$ git config --edit --global			<= to edit global config file,
		
		$ git config --global user.name "John Doe"
	
3. System Level(applied to every user on the system and all their repositories) 
			System configs are available for all the users/projects and stored in 
			>> /etc/gitconfig <<
	
		$ git config --list --system 		<= to view (may need sudo)	
		$ git config --system color.ui true	<= to set 
		$ git config --edit --system		<= to edit system config file (sudo)
	
		$ git config --global user.name "John Doe"

View All Setting
	$ git config --list 
	$ git config  -l
	
	$ git config --list --show-origin
	$ git config user.name
	
------------------------------------------------------------------------------------------	







------------------------------------------------------------------------------------------
### Clone from repository
------------------------------------------------------------------------------------------
$ mkdir   New_Folder   &&   cd New_Folder
$ git clone https://github.com/nozatech/linux_daily.git

$ git clone https://nozatech:Password@github.com/nozatech/linux_daily.git   <= ID &PW

1. Create a new repository on the command line

	$ echo "$ touch README.md"
	$ git init
	$ git add README.md
	$ git commit -m "first commit"
	$ git remote add origin https://github.com/nozatech/new_project.git
	$ git push -u origin master


2. push an existing repo as ORIGIN

	$ git remote add origin https://github.com/nozatech/jenkins.git
	
	$ git push -u origin master

	
3. How-To PUSH and PULL between A and B Clients

	### Client A: #### 
		a. git clone https://github.com/nozatech/linux_daily.git    	<= first time
		b. git status
		c. edit files & save
		d. git status	
		e. git add . ('-A' all, or a new file_name)
		f. git commit -m "message"
		g. git push
		------------------------------------------------------
		h. git pull <= every morning gets updated codes
		i. edit files & save
		j. git status
		k. git add . ('-A' all, or file_name)
		j. git commit -m "more changes"
		l. git push
		 
			
	### Client B: ###
		a. git clone https://github.com/nozatech/linux_daily.git 	<= first time
		b. git pull				<= any updates
		c. edit files & save
		d. git status
		e. git add . ( or -A or any new file_name )
		f. git commit -m " updated & add new file"
		g. git push


------------------------------------------------------------------------------------------
4. git Branch
------------------------------------------------------------------------------------------
	Go to project folder
	
	a. Update codes first
		$ git pull
	
	b. Check status of Current Branch name 
		$ git branch
			* master					
				
	c. Creating a new 'branch-1' branch from Master			
		$ git branch branch-1 				
		
		$ git branch
			* master
			  branch-1 							<= complete copy of MASTER
	
	e. Checkout to 	branch-1 	  
		$ git checkout branch-1 
			Switched to branch branch-1        <= SWITCHED TO branch-1  ****
			<<... EDIT OR ADD NEW FILES ... >>	
			
		$ git status
			On branch branch-1 
				Changes not staged for commit:
			(use "git add <file>..." to update what will be committed)
			(use "git checkout -- <file>..." to discard changes in working directory)
			modified:   linux_daily.txt
			no changes added to commit (use "git add" and/or "git commit -a")
	
	j. Create a file and add for commit
		$ touch branch-1-aNewFile
		$ git add . ('-A' all, or a new file_name)
		
		$ git commit -m "add a branch-1 file "
			  [function01 def7db3] added branches
		      1 file changed, 22 insertions(+), 15 deletions(-)
		-------------------------------------------------------------------
	
	k. Checking which branch you are in 'function01'
		$ git branch							
			* branch-1 
			master
			
	k. switching back to master if others has some updates one the same file while editing
		$ git checkout master				
			Switched to branch 'master'
			Your branch is up-to-date with 'origin/master'.
		
	l. $ git pull   <= check if MASTER has been modified by other Users before Push
		-------------------------------------------------------------------
		m. 	$ git checkout branch-1 
		n.	$ git merge branch-1 		<= merge function01 branch to Master
			
		o.  $ git checkout master

		p.	$ git status
				On branch branch-1 
				Your branch is up-to-date with 'origin/function01'.
				nothing to commit, working directory clean

				
				
		'git pull' does two operations; first it does a 'git fetch' to get up to date with the 'commits' 
		in the remote repo (which updates the origin/master ref in your local repo), then it does 
		a 'git merge' to merge those commits into the current branch.

		Until you do the fetch step (either on its own or via 'git pull') your local repo has no way 
		to know that there are additional 'commits upstream', and 'git status' only looks at your local 
		repo (in this case it looks at the origin/master ref, which is just a commit ID stored on 
		your local file system).

		When 'git status' says up to date, it means "up-to-date" with the upstream status that was 
		retrieved last time we did a fetch" which is not the same as "up to date with the latest 
		live status of the upstream".	
		

#################################################################################################	

1. Add a file in github through console(First Time)

	Open "Git Bash"
	Go to folder/directory where you want to keep your files @local system using "cd" command.
	Create a folder and go inside that folder
	add a sample file in that folder from UI
	execute following commands one by one and add your github username/password they they prompt (In Last)

	$ git init
	$ echo "first file" > test.php
	# $ touch test.php | echo "first file" >> test.php
	$ git add test.php
	$ git config --global user.name "nozatech"
	$ git config --global user.pawsswd "password"
	$ git commit -m "test file"
	$ git remote add origin  https://github.com/nozatech/new_project.git
	$ git push -u origin master


2. Add a new file in github
	add a new file in folder (suppose file name is "arun1.php")
	Execute following commands one by one
	
	$ git add filename
	$ git commit -m "test file filename"
	$ git push -u origin master

3. Update a file in the github
	Change one file and save
	Execute the following commands one by one
	
	$ git add * (. or -A)				<- all
	$ git commit -m "updated file"
	$ git push -u origin master


4. Delete a file
	$ git rm filename
	$ git commit -m "deleted file"
	$ git push -u origin master
	


###  git push origin vs. git push origin master
$ git push origin master		<- This only pushes your master branch to origin
$ git push origin				<- Pushes all your branches to origin	


### Please, commit your changes or 'stash' them before you can merge.
$ git stash			<= Store your 'changes' temporarily and discard 
						those changes from working directory 
						
$ git pull <remote name> <remote branch name> (or) switch branch
					<= command you can pull / switch branches 

$ git stash apply
$ git stash apply --index
					<= Restore the important changes which you have discarded temporarily. 
		  (--index option is useful for those files are 'not staged' are being 'upstaged') 	

#----------------------------------------------------------------------------------------
# Git Reset
http://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head		
#----------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------
#### Troubleshooting ###
#----------------------------------------------------------------------------------------
1. Line feed(LF) will be replaced by CRLF(Carriage Return Line Feed) in GIT message
	In Unix systems the end of a line is represented with a line feed (LF). In windows a line is represented 
	with a carriage return (CR) and a line feed (LF) thus (CRLF). when you get code from git that was uploaded 
	from a unix system they will only have a LF.

	$ git config core.autocrlf true   <= Disable warning
	
2. Updates were rejected because the remote contains work that you 
http://stackoverflow.com/questions/18328800/github-updates-were-rejected-because-the-remote-contains-work-that-you-do-not-h
http://stackoverflow.com/questions/16103810/force-my-local-master-to-be-origin-master

	$ git push -f origin master
	$ git push -f origin master:master
	
3. error: Your local changes to the following files would be overwritten by merge:
http://stackoverflow.com/questions/15745045/how-do-i-resolve-git-saying-commit-your-changes-or-stash-them-before-you-can-me

	$ git stash				<= stores the changes temporarily 
	$ git stash	-l			<= list current stashes
	$ git pull 				<= switches branches
	# $ git pull <remote name> <remote branch name> (or) switch branch
	
	$ git stash apply 			<= Restore stashed
	$ git stash apply --index	<= Restore the changes from temporarily backed up
								   --index <= staged files are still staged
	

	1. Commit the change using
		$ git commit -m "My message"

	2. Stash(hide the changes) it.
		Stashing acts as a stack, where you can push changes, and you pop them in reverse order.
		
		#To stash type:
		$ git stash
		
		# Do the merge, and then pull the stash:
		$ git stash pop

	3. Discard the local changes
		$ git reset --hard    
		$ git checkout -t -f remote/branch

	3. a) Discard local changes for a specific file
		$ git checkout filename
	
4. Pull is not possible because you have unmerged files
https://stackoverflow.com/questions/26376832/why-does-git-say-pull-is-not-possible-because-you-have-unmerged-files/27187110

	$ git fetch origin
	$ git reset --hard origin/master
	$ git pull
	
	
	




#######################################################################################
Course: Software Version Control
https://www.linkedin.com/learning/learning-software-version-control

	
$ git --version	
$ mkdir gitTest && cd gitTest

# Create repository
$ git init	<= Initialized empty Git repository in /home/apark/gitTest/.git/
 	
	drwxrwxr-x.  3 apark apark   17 Jan 16 15:14 .
	drwx------. 11 apark apark 4096 Jan 16 15:14 ..
	drwxrwxr-x.  7 apark apark 4096 Jan 16 15:14 .git


	
	
	
	
GitHub Actions
	Create workflows to automatically build, test and deploy your code, triage your issues, 
	publish packages, and more.	
	
	
	
	
	
	
Introduction to Git - Branching and Merging
https://www.youtube.com/watch?v=FyAAIHHClqI	

$ mkdir gitBranchingMerging && cd gitBranchingMerging
$ git init
$ echo "IP 10.0.0.1" > switch1
	# touch switch1
$ git add switch1
$ git commit -m "First commit switch1"

$ cp swithch1 switch2
$ git commit -am "Commit switch2"	
	
$ git log			<- look up git history	
	
	
# git branch
<Master Branch>  <Branch>
		Prod3
		  ^		^\		  <- Merge from Dev2 to Prod3
		Prod2	 Dev2	
		  ^		  ^
		Prod1 -> Dev1
		
$ alias gg="git log --all --decorate --oneline --graph"

# Create branches SDN and auth	
$ git branch SDN	
$ git branch auth

$ git branch
	  SDN
	  auth
	* master

# Checkout work on branch
$ git checkout SDN
$ git branch
	* SDN				<= Checked out branch
	  auth
	  master
$ git status
	# On branch SDN
	nothing to commit, working directory clean  

$ git checkout SDN
	$ vi s1
	$ git commit -am "Update file s1"
	
$ git checkout auth	
$ gg 		<= (alias gg="git log --all --decorate --oneline --graph")
	| * 1c766d3 (HEAD, auth) From Auth branch for S1
				 ^^^ head location, branch location


# Git merge
# Fast forward merge

# Shows Master pulls from SDN branch to Master branch	
$ git diff master SDN		#git diff master..SDN  <-also works
				
	diff --git a/s1 b/s1
	index 655c6e6..2583b4d 100644
	--- a/s1
	+++ b/s1
	@@ -1 +1,2 @@
	 s1
	+adding from SDN branch 1st mod

# Merge SDN branch to MASTER	
$ git merge SDN	
	Updating f7af19e..5cb3928
	Fast-forward
	 s1 | 3 ++-
	 1 file changed, 2 insertions(+), 1 deletion(-)

$ gg 	<= (alias gg="git log --all --decorate --oneline --graph") 
	* 5cb3928 (HEAD, master, SDN) update s1 file context
	* e4f654c update from SDN branch
	| * fc03fac (auth) update s1 from auth branch
	|/
	* f7af19e s1 s2 update
	* 2f1d0f6 git first commit
	
# SDN branch merge is done and delete SDN branch	
# List and Check merged branch
$ git branch --merged
	  SDN			<= Master branch is merged with SDN branch already
	* master

$ git branch -d SDN
	Deleted branch SDN (was 5cb3928).

# List branches
$ git branch
	  auth
	* master

# Can't delete unmerged branch "auth"
$ git branch -d auth
	error: The branch 'auth' is not fully merged.
	If you are sure you want to delete it, run 'git branch -D auth' <= Froce -D
	
	
# 3-Way Merge
$ git branch
	  auth
	* master
$ git merge auth

$ gg
	*   e788293 (HEAD, master) Mater merge with SDN
	|\
	| * fc03fac (auth) update s1 from auth branch	<= pointing to Head, Master 
	* | 5cb3928 update s1 file context
	* | e4f654c update from SDN branch
	|/
	* f7af19e s1 s2 update
	* 2f1d0f6 git first commit

$ git branch -d auth
Deleted branch auth (was fc03fac).

	
# Merge Conflicts
	
	
	
	
	
	
	
	
	
	
	
	
	
