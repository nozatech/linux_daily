Ansible + Kubernetes

https://www.edureka.co/blog/cheatsheets/ansible-cheat-sheet-guide/

### YAML Valicator 
	https://codebeautify.org/yaml-validator

# Configuration Management 101: Writing Ansible Playbooks
	https://www.digitalocean.com/community/tutorials/configuration-management-101-writing-ansible-playbooks


# Ansible Setup
	# CentOS7  <== Works better
		https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-centos-7
	# Ubuntu 18
		https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-18-04

	$ ansible --version
	    ansible 2.4.2
	$ ansible --help

	Ansible Loops
	https://docs.ansible.com/ansible/2.4/playbooks_loops.html
	 
	$ kubectl version
		v1.14.0


1. SSH Key Setup

	#Setting Up SSH Command
	  $ sudo apt-get install openssh-server
	#Generating SSH Key 
	  $ ssh-keygen
	#Copy the SSH Key on the Hosts
	  $ ssh-copy-id hostname
	#Check the SSH Connection 
	  $ ssh user_id@<nodeName>

2. Install Ansible

	#Add Ansible repository 
	  $ sudo apt-add-repository ppa:ansible/ansible
	#Run the update command 
	  $ sudo apt-get update
	#Install Ansible package 
	  $ sudo apt-get install ansible
	#Check Ansible Version
	  $ ansible –version


3. Inventory Files & Hosts Patterns

	#Set up hosts by editing the hosts' file in the Ansible directory
	  $ sudo vi /etc/ansible/hosts

	#To check the connection to hosts
	#Change your directory to /etc/ansible 
	  $ cd /etc/ansible

	#Ansible’s 'ping module' allows you to check whether Ansible is connecting to hosts 
	$ ansible –m ping all				

	#To check on servers individually  
	$ ansible -m ping server_name			<= -m 'MODULE_NAME'

	#To check a particular server group 
	$ ansible -m ping servergroupname
	
	# Create a 'kube-cluster' folder in home directory
	$ mkdir ~/kube-cluster
	$ vi    ~/kube-cluster/hosts			
	--------------------------------------------------------
	#[gitlab_ansible]
	#gitlab ansible_host=167.71.121.107 ansible_user=netops

	[masters]
	mc1     ansible_host=134.209.6.242    ansible_user=root

	[workers]
	wc1     ansible_host=157.230.128.122  ansible_user=root
	wc2     ansible_host=68.183.163.158   ansible_user=root


	#[all:vars]
	#ansible_python_interpreter=/usr/bin/python3
	--------------------------------------------------------

	$ ansible -m ping all			<= ping all servers 			 in /etc/ansible/hosts file
	$ ansible -m ping masters		<= ping all group name 'servers' in /etc/ansible/hosts file
	$ ansible -m ping workers		<= ping indivisual server 		 in /etc/ansible/hosts file
	$ ansible -m ping w1:w2
	$ ansible -m shell -a 'free -m' host1	<= -m shell module shell


### CentOS7 + Ansible + Docker + Kubernetes Setup	
	# How To Create a Kubernetes Cluster Using Kubeadm on CentOS 7
	# https://www.digitalocean.com/community/tutorials/how-to-create-a-kubernetes-cluster-using-kubeadm-on-centos-7
	----------------------------------------------------------------
	### Playbook ###
	----------------------------------------------------------------
	Create non-root user account in sudoer 
----------------------------------------------------------------	
	$ vi ~/kube-cluster/initial.yml
----------------------------------------------------------------
- hosts: all
  become: yes
  tasks:
    - name: create the 'netops' user
      user: name=netops append=yes state=present createhome=yes shell=/bin/bash

    - name: allow 'netops' to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        line: 'netops ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: set up authorized keys for the netops user
      authorized_key: user=netops key="{{item}}"
      with_file:
        - ~/.ssh/id_rsa.pub

    - name: 'Restart SSH daemon'
      service:
        name: sshd
        state: restarted
	
----------------------------------------------------------------------------
	# state:   <= absent, latest, present, removed, present, restarted
	# enabled: <= yes
----------------------------------------------------------------------------
  $ ansible-playbook -i ~/kube-cluster/hosts ~/kube-cluster/initial.yml  		<= -i Inventory host file


----------------------------------------------------------------
Step 3 — Installing Kubernetes’ Dependencies
	Install the operating system(OS) level packages required by Kubernetes with Ubuntu’s 
	package manager. These packages are:
----------------------------------------------------------------
Docker - a container runtime. It is the component that runs your containers. 
		 Support for other runtimes such as rkt is under active development in Kubernetes.
kubeadm - a CLI tool that will install and configure the various components of a cluster 
		  in a standard way.
kubelet - a system service/program that runs on all nodes and handles node-level operations.
kubectl - a CLI tool used for issuing commands to the cluster through its API Server.
----------------------------------------------------------------


----------------------------------------------------------------

### Installing Kubernetes' Dependencies
	Docker 	<= a container runtime. It is the component that runs your containers. 
				Support for other runtimes such as rkt is under active development in Kubernetes.
	kubeadm <= a CLI tool that will install and configure the various components of a cluster 
				in a standard way.
	kubelet <= a system service/program that runs on all nodes and handles node-level operations.
	kubectl <= a CLI tool used for issuing commands to the cluster through its API Server.
	
----------------------------------------------------------------	
$ vi ~/kube-cluster/kube-dependencies.yml
----------------------------------------------------------------
- hosts: all
  become: yes
  tasks:
   - name: install Docker
     yum:
       name: docker
       state: present
       update_cache: true

   - name: start Docker
     service:
       name: docker
       state: started

   - name: Enable service Docker
     service:
       name: docker
       enabled: yes

   - name: disable SELinux
     command: setenforce 0

   - name: disable SELinux on reboot
     selinux:
       state: disabled

   - name: ensure net.bridge.bridge-nf-call-ip6tables is set to 1
     sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: 1
      state: present

   - name: ensure net.bridge.bridge-nf-call-iptables is set to 1
     sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: 1
      state: present

   - name: add Kubernetes' YUM repository
     yum_repository:
      name: Kubernetes
      description: Kubernetes YUM repository
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      gpgcheck: yes

   - name: install kubelet
     yum:
        name: kubelet-1.14.0
        state: present
        update_cache: true

   - name: install kubeadm
     yum:
        name: kubeadm-1.14.0
        state: present

   - name: start kubelet
     service:
       name: kubelet
       enabled: yes
       state: started

- hosts: mc1
  become: yes
  tasks:
   - name: install kubectl
     yum:
        name: kubectl-1.14.0
        state: present
        allow_downgrade: yes




----------------------------------------------------------------
    - name: install Aptitude
      apt:
        name: aptitude
        state: present			<= absent, latest, present, removed, present, restarted

https://kubernetes.io/blog/2019/03/15/kubernetes-setup-using-ansible-and-vagrant/
https://raw.githubusercontent.com/do-community/ansible-playbooks/master/docker/ubuntu1804.yml

----------------------------------------------------------------
Step 4 — Setting Up the Master Node
----------------------------------------------------------------
A pod is an atomic unit that runs one or more containers. These containers share resources such as 
file volumes and network interfaces in common. Pods are the basic unit of scheduling in Kubernetes: 
all containers in a pod are guaranteed to run on the same node that the pod is scheduled on.

Each pod has its own IP address, and a pod on one node should be able to access a pod on another 
node using the pod’s IP. Containers on a single node can communicate easily through a local 
interface. Communication between pods is more complicated, however, and requires a separate 
networking component that can transparently route traffic from a pod on one node to a pod on another.

This functionality is provided by pod network plugins. For this cluster, you will use Flannel, 
a stable and performant option.
----------------------------------------------------------------

$ vi ~/kube-cluster/master.yml   
	mc1 <= master1 CentOS
----------------------------------------------------------------
- hosts: mc1
  become: yes
  tasks:
    - name: initialize the cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - name: create .kube directory
      become: yes
      become_user: netops
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/netops/.kube/config
        remote_src: yes
        owner: netops

    - name: install Pod network
      become: yes
      become_user: netops
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml >> pod_network_setup.txt
      args:
        chdir: $HOME
        creates: pod_network_setup.txt

----------------------------------------------------------------
Kubernetes Version check
----------------------------------------------------------------
	$ kubectl version
	$ kubectl get nodes -o yaml
----------------------------------------------------------------

----------------------------------------------------------------
$ kubectl get nodes
	NAME   STATUS   ROLES    AGE    VERSION
	mc1    Ready    master   2d1h   v1.14.0
	wc1    Ready    <none>   40h    v1.14.0
	wc2    Ready    <none>   40h    v1.14.0
----------------------------------------------------------------
# run from Master node
  Creating Nginx POD
----------------------------------------------------------------
	$ kubectl create deployment nginx --image=nginx

	$ kubectl get pods
		NAME                     READY   STATUS    RESTARTS   AGE
		nginx-65f88748fd-m6skk   1/1     Running   0          38h

	$ kubectl expose deploy nginx --port 80 --target-port 80 --type NodePort

	$ kubectl get services
		NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
		kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        2d1h
		nginx        NodePort    10.97.180.139   <none>        80:32467/TCP   38h		<= 80:32467/TCP Nginx's Port Forwarding

	# Test
		http://master_1_ip:nginx_port
		http://worker_1_ip:nginx_port
		http://worker_1_ip:nginx_port
	
----------------------------------------------------------------
Removing the Nginx application
----------------------------------------------------------------

		
	$ kubectl delete service nginx
		service "nginx" deleted

	$ kubectl get services			<= To check
		NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
		kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   2d1h

----------------------------------------------------------------
Delete the deployment
----------------------------------------------------------------
	$ kubectl delete deployment nginx
		deployment.extensions "nginx" deleted

	$ kubectl get deployments
		No resources found.








----------------------------------------------------------------


----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------




----------------------------------------------------------------
# Troubleshooting after Kubectl failed
	The connection to the server 134.209.6.242:6443 was refused - 
	did you specify the right host or port?
https://www.thegeekdiary.com/troubleshooting-kubectl-error-the-connection-to-the-server-x-x-x-x6443-was-refused-did-you-specify-the-right-host-or-port/	
----------------------------------------------------------------
    $ env | grep -i kube					<= 
		KUBECONFIG=/root/.kube/config                    
	$ systemctl status docker
	$ systemctl status kubelet
	$ netstat -plnt | grep 6443

    $ journalctl -xeu kubelet
	$ firewall-cmd --list-all

	$ kubeadm-setup.sh restart  
	
						
----------------------------------------------------------------

----------------------------------------------------------------

----------------------------------------------------------------
# Ansible Commands
----------------------------------------------------------------

ansible-2             ansible-console-2.7   ansible-galaxy-2.7    ansible-pull-2
ansible-2.7           ansible-doc           ansible-inventory     ansible-pull-2.7
ansible-config        ansible-doc-2         ansible-playbook      ansible-vault
ansible-connection    ansible-doc-2.7       ansible-playbook-2    ansible-vault-2
ansible-console       ansible-galaxy        ansible-playbook-2.7  ansible-vault-2.7
ansible-console-2     ansible-galaxy-2      ansible-pull




















###  Ad-Hoc commands ###
	Ad-Hoc commands are quick commands which are used to perform the actions, 
	that won’t be saved for later.
	
	https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html
	https://www.ansible.com/overview/how-ansible-works
	Module Index 750
	https://docs.ansible.com/ansible/latest/modules/modules_by_category.html


	## Parallelism and Shell Commands
	#To set up SSH agent
	----------------------------------------------------------------
	$ ssh-agent bash
	$ ssh-add ~/.ssh/id_rsa

	#To use SSH with a password instead of keys, you can use --ask-pass (-K)
	$ ansible europe -a "/sbin/reboot" -f 20

	#To run /usr/bin/ansible from a user account, not the root
	$ ansible europe -a "/usr/bin/foo" -u username

	#To run commands through privilege escalation and not through user account
	$ ansible europe -a "/usr/bin/foo" -u username --become [--ask-become-pass]

	#If you are using password less method then use  --ask-become-pass (-K)
	#to interactively get the  password to be  used

	#You can become a user, other than root by using --become-user
	$ ansible europe -a "/usr/bin/foo" -u username --become --become-user otheruser [--ask-become-pass]
	----------------------------------------------------------------
	### File Transfer
		Ansible can perform secure transmissions of files to multiple machines in parallel.
	----------------------------------------------------------------
	#Transfer a file directly to many servers
	$ ansible europe -m copy -a "src=/etc/hosts dest=/tmp/hosts"

	#To change the ownership and permissions on files 
	$ ansible webservers -m file -a "dest=/srv/foo/a.txt mode=600"
	$ ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=example group=example"

	#To create directories 
	$ ansible webservers -m file -a "dest=/path/to/c mode=755 owner=example group=example state=directory"

	#To delete directories (recursively) and delete files
	$ ansible webservers -m file -a "dest=/path/to/c state=absent"
	----------------------------------------------------------------
	### Deploying From Source Control
	----------------------------------------------------------------
	#GitRep:https://foo.example.org/repo.git
	#Destination:/src/myapp
	$ ansible webservers -m git -a "repo=https://foo.example.org/repo.git dest=/src/myapp version=HEAD"
	----------------------------------------------------------------
	### Manage Packages
		This section consists of commands to manage packages.
	----------------------------------------------------------------
	#To ensure that a package is installed, but doesn’t get updated
	$ ansible webservers -m apt -a "name=acme state=present"

	#To ensure that a package is installed to a specific version
	$ ansible webservers -m apt -a "name=acme-1.5 state=present"

	#To ensure that a package at the latest version
	$ ansible webservers -m apt -a "name=acme state=latest"

	#To ensure that a package is not installed
	$ ansible webservers -m apt -a "name=acme state=absent"
	----------------------------------------------------------------
	### Manage Services
		This section consists of commands to manage services.
	----------------------------------------------------------------
	#To ensure a service is started on all web servers
	$ ansible webservers -m service -a "name=httpd state=started"

	#To restart a service on all web servers
	$ ansible webservers -m service -a "name=httpd state=restarted"

	#To ensure a service is stopped
	$ ansible webservers -m service -a "name=httpd state=stopped
	----------------------------------------------------------------

	
	----------------------------------------------------------------
	
	----------------------------------------------------------------
	
	----------------------------------------------------------------
	
	----------------------------------------------------------------
	
	----------------------------------------------------------------
	
	----------------------------------------------------------------
	
	----------------------------------------------------------------
	----------------------------------------------------------------

	
	
	# PING
	$ ansible all -m ping
	$ ansible -i ~/k8-cluster/hosts -m ping all
	--------------------------------
	 [WARNING]: Found both group and host with same name: master
	worker2 | SUCCESS => {
		"changed": false,
		"ping": "pong"
	}
	worker1 | SUCCESS => {
		"changed": false,
		"ping": "pong"
	}
	master | SUCCESS => {
		"changed": false,
		"ping": "pong"
	}
	--------------------------------

# -a MODULE_ARGS, --args=MODULE_ARGS module arguments
# -m MODULE_NAME, --module-name=MODULE_NAME
                        module name to execute (default=command)

$ ansible -i hosts 			-a 'uptime' all			<= i inventory
$ ansible -i hosts 			-a 'last reboot' all
$ ansible -i hosts 			-a 'who' all						
$ ansible -i hosts 			-a 'whoami' all
$ ansible -i hosts 			-a 'echo $SHELL' all

# Using -m Shell Module
$ ansible -i hosts -m shell -a 'uptime' all
$ ansible -i hosts -m shell -a 'last reboot' all
$ ansible -i hosts -m shell -a 'who' all
$ ansible -i hosts -m shell -a 'whoami' all
$ ansible -i hosts -m shell -a 'echo $SHELL' all



# Creating a Non-Root User on All Remote Servers

$ vi ~/k8-cluster/initial.yml
---------------------------------------------------------------
- hosts: all
  become: yes
  tasks:
    - name: create the 'noza' user
      user: name=noza append=yes state=present createhome=yes shell=/bin/bash

    - name: allow 'noza' to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        line: 'noza ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: set up authorized keys for the ubuntu user
      authorized_key: user=noza key="{{item}}"
      with_file:
        - ~/.ssh/id_rsa.pub
---------------------------------------------------------------
$ ansible-playbook -i /etc/ansible/hosts ~/kube-cluster/initial_2.yml

# Creating users in hosts file
$ ansible-playbook -i hosts ~/k8-cluster/initial.yml

# Ansible Playbook
$ ansible-playbook -i hosts ~/k8-cluster/initial.yml

  ansible 이 
		 -playbook(책을갖고 놀다)가 
				   -i(아이)를 다쳐 
					  hosts(호스피탈)에 갔는데 
										initial.yml(아이)이식을 해야한다네.

---------------------------------------------------------------
### Playbooks ###
	Playbooks in Ansible are written in YAML format. It is a human-readable data serialization 
	language that is commonly used for configuration files. It can also be used in many 
	applications where data is being stored.

	A playbook has various parameters that you need to mention, like Hosts & Users, Variables, 
	Tasks, Handlers, Modules and Return Values.
---------------------------------------------------------------
Sample Playbook
This is the sample playbook to start the Apache httpd Server program. 

---------------------------------------------------------------
#Every YAML file starts with ---
---
- hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
  remote_user: root

  tasks:
  - name: ensure apache is at the latest version
    apt: name=httpd state=latest
  - name: write the apache config file
    template: src=/srv/httpd.j2 dest=/etc/httpd.conf
    notify:
    - restart apache
  - name: ensure apache is running (and enable it at boot)
    service: name=httpd state=started enabled=yes

  handlers:
    - name: restart apache
      service: name=httpd state=restarted
---------------------------------------------------------------
Writing a Playbook
Follow the below steps to write a run a playbook. For the ease of understanding, 
the commands are in a generalized format.

---------------------------------------------------------------
#SSH Key Generation
$ ssh key-gen

#Copy the  generated public SSH key on your hosts
$ ssh-copy-id -i root@<IP address of your host>

# List the IP addresses of your hosts/nodes in your inventory 
$ vi /etc/ansible/hosts

#Ping to ensure a connection has been established
$ ansible -m ping <Name of the Host>

#You do not have to follow the above steps, if you already have host connected to the control machine.

#Create a Playbook
$ vi <name of your file>.yml

#To write the playbook refer to the snapshot here.

#Run the playbook
$ ansible-playbook <name of your file>.yml
---------------------------------------------------------------

















File Transfer
Managing Packages
Users and Groups
Deploying From Source Control
Managing Services
Time Limited Background Operations
Gathering Facts








							


### $ ansible-playbook   -i	hosts  ~/kubernetes/initial.yml
	$ ansible-playbook    -i	hosts  ~/kubernetes/userSetup.yml


### $ ansible-playbook   -i	hosts  ~/kubernetes/dependency.yml
	$ ansible-playbook    -i	hosts  ~/kubernetes/kubernetesSetup.yml

### $ ansible-playbook   -i	hosts  ~/kubernetes/master.yml
	$ ansible-playbook   -i	hosts  ~/kubernetes/masterSetup.yml

### $ ansible-playbook   -i	hosts  ~/kubernetes/workers.yml
	$ ansible-playbook   -i	hosts  ~/kubernetes/workersSetup.yml


BNER Git Clone
Gitlab -> Projects -> DevOps/Ansible -> Clone
Cone with SSH or HTTPS
git@git.ops.bandainamcoent.ro:devops/ansible.git

							
							
							
ansible-galaxy
reusable Roles for server configuration or application installation.



# Configuration Management 101: Writing Ansible Playbooks
  https://www.digitalocean.com/community/tutorials/configuration-management-101-writing-ansible-playbooks

	Following list contains all steps to automate
	
	1. Update the apt cache
	2. Install Apache
	3. Create a custom document root directory
	4. Place an index.html file in the custom document root
	5. Apply a template to set up our custom virtual host
	6. Restart Apache
	
	
	Terminology
	
	Control Node: <- the machine where Ansible is installed, responsible for running the provisioning 
				     on the servers you are managing.
	Inventory:    <- an INI file that contains information about the servers you are managing.
	Playbook: 	  <- a YAML file containing a series of procedures that should be automated.
	Task: 		  <- a block that defines a single procedure to be executed, e.g.: install a package.
	Module: 	  <- a module typically abstracts a system task, like dealing with packages or 
					 creating and changing files. Ansible has a multitude of built-in modules, but you 
					 can also create custom ones.
	Role:         <- a set of related playbooks, templates and other files, organized in a pre-defined 
				     way to facilitate reuse and share.
	Play:         <- a provisioning executed from start to finish is called a play.
	Facts:        <- global variables containing information about the system, like network interfaces 
					 or operating system.
	Handlers:     <- used to trigger service status changes, like restarting or reloading a service.
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
