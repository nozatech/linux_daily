### In-House CDN Solution ### 
Using NGINX, Apache2 Webdav, Geo_IP DB, Load Balancer, Rsync and Cron Setup 

# DO VM's Internet Speed Test
$ curl -s  https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -
Hosted by Citybridge (New York City, NY) [2.13 km]: 2.468 ms
Testing download speed................................................................................
Download: 1551.09 Mbit/s
Testing upload speed....................................................................................................
*** Upload: 463.42 Mbit/s		<=

40BM video Play time is 29sec
Set 1500k/sec for 21sec download time.
2MB x 8 bits = 16 Mbit/s
463Mbit / 16Mbit = 29 CCU per Server







A. CDN Requirements
	1.  Setup NginX Global Lobby Server 
		a. OS - Ubuntu 14.04, IPtables
		b. Apache2, Webdav, Rsync, Cron job, Nginx, Maxmind¡¯s GeoIP + GeoIP¡¯s city database
		c. Perl Script disable Nginx's reverse proxy
	2. Setup US, EU, AS edge load balancer to forward traffic to pool of upstreaming servers.
	3. Setup pool of regional upstreaming servers based on expected traffic.
	4. Puppet
	5. Grafana
	6. Kibana
	
	
B. Lobby & Load Balancer DNS Setup 
   cdn-lobby.namcowireless.com (redirect to US, EU, AS regional LB servers)
   cdn-us-lb.namcowireless.com (load balancer for pool of US region servers)
   cdn_us-pool-01 (load balancer for pool of EU region servers)
   cdn_us-pool-02 (load balancer for pool of AS region servers)
   cdn-eu-lb.namcowireless.com (load balancer for pool of EU region servers)
   cdn_eu-pool-01 (load balancer for pool of EU region servers)
   cdn_eu-pool-02 (load balancer for pool of AS region servers)
   
C. CDN Global Traffic Director Setup
	a. Install NginX and GeoIP on Ubuntu 14.04 server
       apt-get update
       apt-get install nginx-full geoip-database
       wget -N http://geoip.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
       gunzip GeoLiteCity.dat.gz
       mv GeoLiteCity.dat    /usr/share/GeoIp/
       Nginx -V   <=  List of all modules
       Nginx -v   <= version


	b. Configure NginX on CDN US Lobby Server
       vi /etc/nginx/nginx.conf
       Add following lines
                       ############### Locate the GeoIP GeoLiteCity.Dat file #################
	http{
	    geoip_city /user/share/GeoIP/GeoLiteCity.dat;
	}
	##############################################################

	vi /etc/nginx/sites-available/default
         
       Add following lines
                       ##################### List of LB servers list ########################
 		map $geoip_city_continent_code $closest_server {
                          default        cdn_edge_us_01.namcowireless.com;
                          EU              cdn_edge_eu_01.namcowireless.com;
        #  AS              cdn_edge_as_01.namcowireless.com;
                                    }
	
		server   {
		        listen   80; ## listen for ipv4; this line is default and implied
               #listen   [::]:80 default ipv6only=on;                              # listen for ipv6
    
        server_name 	
       cdn_edge_us_01.namcowireless.com	#US nginX load balancer	
			cdn_edge_eu_01.namcowireless.com	#EU nginx load balancer
			# cdn_edge_as_01.namcowireless.com;	#AS nginx load balancer
                       	 if  ($closest_server != $host)  {
		            rewrite  ^  $scheme://$closest_server$request_uri   break;
	             }
		 ##############################################################




	c. Check Config files and reload service
		nginx -t,  service nginx configtest,  /etc/init.d/nginx configtest
		nginx -s reload, service nginx reload, /etc/init.d/nginx reload





D. Configure  US, AS, EU Load Balancer(Edge) servers

    a. Configure Nginx on cdn_edge_us_01 Load Balancer server 
		apt-get update
		apt-get install nginx-full     
		vi /etc/nignx/sites-available/default

Edit & Add following upstream module
 ############################## Pool of US servers list ##########################
Upstream backend {						            
	ip_hash;
	Server 	x.x.x.x   max_fails=3	fail_timeout=10s	weight=1;
    Server 	x.x.x.x   max_fails=3	fail_timeout=10s	weight=2;
    Server 	x.x.x.x   max_fails=3	fail_timeout=10s	weight=1	backup;
    Server 	x.x.x.x   max_fails=3	fail_timeout=10s	weight=1	down;
      #Add more servers 
      #Server x.x.x.x   max_fails=3	fail_timeout=10s	weight=1;
}
Server 	{
		Listen 80;
   Location /cdn/data {
 		Proxy_pass 	http://backend;
   }
     }

############################################################################







4. WebDav setup using Apache2 
       apt-get update
apt-get install apache2 apache2-utils


a. Enable webdav modules
       sudo a2enmod dav
sudo a2enmod dav_fs

2. Adding webdav user
   sudo htdigest (?c) /etc/apache2/user.password webdav user_ID                   
                        # -c create for first time only.  Additional users not required
   sudo chown www-data:www-data  /etc/apache2/users.password

  vi /etc/apache2/ports.conf   to change from default port 80 => 8080
         vi /etc/apache2/sites-available/000-default.conf
############################################################################
DavLockDB /cdn/data/DavLock

<VirtualHost *:8080>                                                           #changed from 80 to 8080
#
#
#Add following 
        Alias /webdav /cdn/data/webdav

        <Directory /cdn/data/webdav>
                DAV On
                AuthType Digest
                AuthName "webdav"
                AuthUserFile /etc/apache2/users.password
                Require valid-user

        </Directory>


</VirtualHost>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet

############################################################################
Map a drive with Windows explorer or MAC using new user_ID & PW 


5. File Sync & Schedule 

a. Lobby Server
       crontab ?u user_ID ?e
Add following
############################################################################
PATH=:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
SHELL=/bin/bash

@reboot echo "System start up"

*/5 * * * * date >> /cdn/log 2>&1 

*/5 * * * *  bash -c /cdn/rsync_cdn.sh >> /cdn/log 2>&1 

#Clean up the log 1st day of month
0 0 1 * * > /cdn/log

############################################################################

b. Create a file sync script
vi /cdn/rsync.sh
####################################################################
# !/bin/bash
####################################################################
# rsync_cdn.sh
# Replicate files trees to server using rsync
# Usage:
#    sh rsync_cdn.sh
# authorized ssh key should be copied over to destination server prior to the rsyn to run
#####################################################################

PATH=:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
SHELL=/bin/bash
Host=$(hostname)
User=$(whoami)

rsync -avz -e ssh /cdn/data/webdav  ID@us_loadbalancer_IP(or name):/cdn/data/

rsync -avz -e ssh /cdn/data/webdav  ID@eu_loadbalancer_IP(or name):/cdn/data/

rsync -avz -e ssh /cdn/data/webdav  ID@as_loadbalancer_IP(or name):/cdn/data/
################################################################	


c. US, EU, AS Load Balancers to Pool servers
US Load Balancer 

######################################################################
# !/bin/bash
######################################################################
# rsync_cdn.sh
# Replicate file trees to server using rsync
# Usage:
#     sh rsync_cdn.sh
# authorized ssh key should be copied over to destination server prior to the rsyn to run
######################################################################
PATH=:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
SHELL=/bin/bash
Host=$(hostname)
User=$(whoami)

# rsync to US Pool-001's Private IP
rsync -avz -e ssh /cdn/data/  ID@IP_address:/cdn/data/

# rsync to US Pool-002's Private IP
rsync -avz -e ssh /cdn/data/  ID@IP_address:/cdn/data/

# rsync to US Pool-003's Private IP
rsync -avz -e ssh /cdn/data/  ID@IP_address:/cdn/data/

# rsync to US Pool-004's Private IP
# rsync -avz -e ssh /cdn/data/  ID@IP_address:/cdn/data/

################################################################
Do the same setting for EU and AS Load balance servers.
Note: Run rsync_cdn.sh file for manual test sync, check log files for schedule sync log and check actual files for downloadable web folder.

6. Iptables

For Ubuntu OS

       apt-get install iptables-persistent
       vi /etc/iptables/rules.v4

################################################################
#  Generated by iptables-save v1.4.21 on Thu Oct 30 14:54:11 2014
*filter
:INPUT ACCEPT [640:46878]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [627:78596]

#########################################################
###                                                                                                     ###
####   CDN-Lobby-US-NY Ubuntu 14.04 Server 64bit                    ####
###                                                                                                     ###
#########################################################
#
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
#
------------------------------------------------------------------------------------------------------------
# Main office
-A INPUT -m state --state NEW -m tcp -p tcp -s x.x.x.0/24 --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp -s x.x.x.0/24 --dport 22 -j ACCEPT
#
# Main office backend
-A INPUT -m state --state NEW -m tcp -p tcp -s x.x.x.0/32 --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp -s x.x.x.0/32 --dport 22 -j ACCEPT
#
-----------------------------------------------------------------------------------------------------------
# Developer IP range
#
#-A INPUT -m state --state NEW -m tcp -p tcp -s x.x.x.0/24 --dport 22 -j ACCEPT
#
------------------------------------------------------------------------------------------------------------
# Web Service HTTP (Port 80)Bundles
#
-A INPUT -m state --state NEW -m tcp -p tcp -s 0.0.0.0/0 --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m udp -p udp -s 0.0.0.0/0 --dport 80 -j ACCEPT
#
------------------------------------------------------------------------------------------------------------
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
#
#
#  -A INPUT -s   IP_Address    -j DROP
#-------------------------------------------------------------------------------
################### Black List for list of IP Addresses ########################
#

#
################################################################################
COMMIT
# Completed on Thu Oct 30 14:54:11 2014
############################################################



7. Test drive for a file to upload, sync, download, and benchmark
¡¡¡¡¡¡a. Upload a file using webdav client such as cardera or map drive for drag&drop 
¡¡¡¡¡¡b. File download
    get http://cdn-us-lb.namcowireless.com/cinemagic/1.jpg
¡¡¡¡¡¡c. Download time test
¡¡¡¡¡¡    time wget http://cdn-us-lb.namcowireless.com/cinemagic/1.jpg
¡¡¡¡¡¡d. Apache Bench Marking Test
¡¡¡¡¡¡   ab -c 100 -n 1000 http://cdn-us-lb.namcowireless.com/cinemagic/1.jpg
¡¡¡¡¡¡e. Apache Jmeter Test ??
¡¡¡¡¡¡
¡¡¡¡¡¡
Note:   CentOS  <= yum ?y install httpd-tools
       Ubuntu <= apt-get install apache-utils


















Upload files 2.
How to setup FTP server on ubuntu 14.04 ( VSFTPD )
FTP is used to transfer files from one host to another over TCP network. This article explains how to setup FTP server on ubuntu 14.04 .
There are 3 popular FTP server packages available PureFTPD, VsFTPD and ProFTPD. Here i¡¯ve used VsFTPD which is lightweight and less Vulnerability.
Setup FTP server on Ubuntu 14.04
Step 1 ??Update repositories.
krizna@leela:~$ sudo apt-get update
Step 2 ??Install VsFTPD package using the below command.
krizna@leela:~$ sudo apt-get install vsftpd
Step 3 ??After installation open?/etc/vsftpd.conf?file and make changes as follows.
Uncomment the below lines (line no: 29 and 33).
write_enable=YES
local_umask=022? Uncomment the below line (line no: 120) to prevent access to the other folders outside the Home directory.
chroot_local_user=YES and add the following line at the end.
allow_writeable_chroot=YES? Add the following lines to enable passive mode.
pasv_enable=Yes
pasv_min_port=40000
pasv_max_port=40100
Step 4 ??Restart vsftpd service using the below command.
krizna@leela:~$ sudo service vsftpd restart

Step 5 ??Now ftp server will listen on port 21. Create user with the below command. Use?/usr/sbin/nologin?shell to prevent access to the bash shell for the ftp users.
krizna@leela:~$ sudo useradd -m john -s /usr/sbin/nologin
-m,?--create-home
Create the user's home directory if it does not exist. The files and directories contained in the skeleton directory (which can be defined with the?-k?option) will be copied to the home directory.
useradd will create the home directory unless?CREATE_HOME?in /etc/login.defs is set to no.
-s,?--shell?SHELL
The name of the user's login shell. The default is to leave this field blank, which causes the system to select the default login shell specified by the?SHELL?variable in /etc/default/useradd, or an empty string by default.
krizna@leela:~$ sudo passwd john

Step 6 ??Allow login access for nologin shell . Open?/etc/shells?and add the following line at the end.
/usr/sbin/nologin

Change permission on folders
Sudo chown ?R game_id:ftpaccess /cdn/data/webdav/game_name

Now try to connect this ftp server with the username on port 21 using?winscp?or FileZilla?client and make sure that user cannot access the other folders outside the home directory.

Please note using ftp on port 21 is a big security risk. it¡¯s highly recommended to use SFTP. Please continue for SFTP configuration
Secure FTP ( SFTP )
SFTP is called as ¡°Secure FTP¡± which generally use SSH File Transfer Protocol . so we need openssh-server package installed , Issue the below command if it¡¯s not already installed.
krizna@leela:~$ sudo apt-get install openssh-server
Step 7 ??Create a new group?ftpaccess?for FTP users.
krizna@leela:~$ sudo groupadd ftpaccess
Step 8 ??Now make changes in this?/etc/ssh/sshd_config?file.
? Find the below line
Subsystem sftp /usr/lib/openssh/sftp-serverand replace with
Subsystem sftp internal-sftp
Match group ftpaccess
ChrootDirectory %h
X11Forwarding no
AllowTcpForwarding no
ForceCommand internal-sftp? and comment the below line ( Last line).
#UsePAM yes
Step 9 ??Restart sshd service.
krizna@leela:~$ sudo service ssh restart
Step 10 ??The below steps must be followed while creating Users for sftp access.
Create user?john?with?ftpaccess?group and?/usr/bin/nologin?shell.
krizna@leela:~$ sudo useradd -m john -g ftpaccess -s /usr/sbin/nologin
krizna@leela:~$ sudo passwd johnChange ownership for the home directory.
krizna@leela:~$ sudo chown root /home/johnCreate a folder inside home directory for writing and change ownership of that folder.
krizna@leela:~$ sudo mkdir /home/john/www
krizna@leela:~$ sudo chown john:ftpaccess /home/john/www
Now try to connect server using SFTP ( port : 22 ) and makesure Users can upload files to?www?directory and cannot access other folders outside home directory.
If you want use both FTP and SFTP together, please perform above steps ( Step 10 ) while creating users . For existing users, move them to ftpaccess group and create folder structure and ownership changes as below.
krizna@leela:~$ sudo usermod john -g ftpaccess -s /usr/sbin/nologin
krizna@leela:~$ sudo chown root /home/john
krizna@leela:~$ sudo mkdir /home/john/www
krizna@leela:~$ sudo chown john:ftpaccess /home/john/www
Now john can able to upload files to www folder using FTP as well as SFTP.

