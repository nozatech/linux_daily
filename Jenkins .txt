Jenkins vs Travis
http://stackoverflow.com/questions/32422264/jenkins-vs-travis-ci-which-one-would-you-use-for-a-open-source-project


https://dzone.com/articles/jenkins-operations-center-tutorial-cjoc
# Jenkins Operation Center(Cloudbee)
The CJOC is used for managing multiple Jenkins Masters. It makes it much easier to scale Jenkins 
horizontally, as it makes it possible to share build nodes between masters. You can also enforce 
security compliance, manage update centers, set up single sign on, and monitor everything all 
from the CJOC.

# Client Master
	A client master is just a normal Jenkins master that we’ve joined to our Operations center 
	cluster for management purposes.
	These masters can then use normal slaves, shared slaves, or a shared cloud.

# Shared slaves 
	slave nodes that are available for any master to use.
	
# A shared cloud 
	spin up temporary slaves when demand exceeds what’s available from the shared slaves.

	
AWS Jenkins HA setup using NFS(Shared Disk)
https://www.youtube.com/watch?v=zHavme2iaFA

Nexus Repository
https://www.youtube.com/watch?v=XzJ2FnIapAE



					  |-> Artifacotry, Nexus, S3
Dev -> Git -> JENKINS |-> Test
					  |-> UAT(User acceptance Testing)
					  |-> Production


**UAT -> Unit Testing -> Integration -> System -> Acceptance testing					  
**GIT -> initial build -> code quality -> deploy to test -> deploy to UAT -> Deploy to Prod
		
					  
### Binary or Artifact management
https://en.wikipedia.org/wiki/Binary_repository_manager

					  

### Jenkins installation method list
1. Apache2 + Jenkins + Java
2. NginX + Apache2 + Jenkins + Java
3. Java + Jenkins.war
4. Tomcat + Jenkins + Java
5. Dockers + Jenkins
6. Windows install


------------------------------------------------------------------------------
in-house 	→ Jenkins or gitlab-ci
Github.com 	→ Travis-CI
------------------------------------------------------------------------------
1. Setting up CI for a project:
	Travis : comes in first place.. It's very easy to setup. Takes less than a minute to setup with github. -- Login to github - create web hook for Travis - back to Travis (https://travis-ci.org/) - login with github credentials and sync your github repo and enable Push and Pull requests. Very Easy Setup in Travis..
	Jenkins: Create an Environment (Master Jenkins) - create web hooks - configurations on each job (takes time compare to Travis)

2. Re-run the builds:
	Travis : Who ever is having write access on github they can re-run the build by clicking on restart build
	Jenkins: re-run the build based on phrase: provide phrase text in PR/commit description like reverify jenkins

3. Controlling environment:
	Travis : Travis provides hosted environment, Travis installs required softwares for every build is a time consuming process.
	Jenkins: It's a onetime setup, Install all the required softwares in node/slave machine and perform all the tests on pre-installed environment.

4. Build Logs:
	Travis : Supports build logs to place in Amazon S3.
	Jenkins: Easy to setup with build artifacts plugin(Artifactory, Nexus, S3).

------------------------------------------------------------------------------


### JENKINS_HOME directory structure

 +- config.xml     (jenkins root configuration)
 +- *.xml          (other site-wide configuration files)
 +- userContent    (files in this directory will be served under your http://server/userContent/)
 +- fingerprints   (stores fingerprint records)
 +- plugins        (stores plugins)
 +- workspace (working directory for the version control system)
     +- [JOBNAME] (sub directory for each job)
 +- jobs
     +- [JOBNAME]      (sub directory for each job)
         +- config.xml     (job configuration file)
         +- latest         (symbolic link to the last successful build)
         +- builds
             +- [BUILD_ID]     (for each build)
                 +- build.xml      (build result summary)
                 +- log            (log file)

				 
### Moving/copying/renaming jobs 
https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins
$ rename 's/\s/_/g' *



------------------------------------------------------------------------------
1. Jenkins install 
	
### Web Server install	
	apt-get -y install apache2

### System update
	apt-get update && apt-get upgrade -y

### Java Install
	# Ubuntu
	apt-get -y install openjdk-7-jdk
	java -version
	
	# CentOS
	$ sudo yum install java-1.7.0-openjdk-devel

	
### Jenkins Setup
	wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
	sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
	apt-get update
	apt-get -y install jenkins

###  Check Reverse Proxy
	curl -iL -e http://cdn-jenkins.namcowireless.com:8080/jenkins/manage\
    http://cdn-jenkins.namcowireless.com:8080/jenkins/administrativeMonitor/hudson.diagnosis.ReverseProxySetupMonitor/test

2. Java Environment set

	$ apt-get install -y maven git-core 
	$ javac -version									<= java compiler
	$ mvn -version
	$ git --version

	$ readlink -f /usr/bin/javac						<= java compiler pointing 
	/usr/lib/jvm/java-7-openjdk-amd64/bin/javac
	
	

### Ubuntu 16.04 Iptables setup ###
	http://linux-sys-adm.com/ubuntu-16.04-lts-how-to-configure-firewall-iptables-fail2ban/
	https://oitibs.com/easy-ubuntu-16-server-firewall/
	
	# Install IPTables Persistent Package 
	$ apt-get install -y iptables-persistent

	# Add netfilter-persistent Startup
	$ invoke-rc.d netfilter-persistent save
	
	$ service netfilter-persistent stop
	
	### After Edit IPtables ##
	# Start netfilter-persistent Service
	
	$ service netfilter-persistent start
	
	$ iptables -nL	

	
	### Java 8 install
	sudo add-apt-repository ppa:webupd8team/java
	sudo apt update; sudo apt install oracle-java8-installer
	javac -version	# java -version
	
	
	#### Apache Proxy 80 to 8080 using Proxy modules ###
	
	sudo a2enmod proxy
    sudo a2enmod proxy_http
	
	
	vi /etc/apache2/sites-available/jenkins.conf
	----------------------------------------------
	<VirtualHost *:80>
        ServerName 45.55.80.156
        ProxyRequests Off
        <Proxy *>
                Order deny,allow
                Allow from all
        </Proxy>
        ProxyPreserveHost on
        ProxyPass / http://localhost:8080/
	</VirtualHost>
	----------------------------------------------
	$ apachectl configtest
    $ systemctl restart apache2
	
	
	https://www.youtube.com/watch?v=0ZS2BL5R3Ow&t=2s
	https://gist.github.com/jsuwo/9038610
	
	"Manage Jenkins -> Global Tool Configuration"
	apt-get install maven git-core
	javac -version
	mvn -version
	git --version
	
	### Link to Javac
	$ readlink -f /usr/bin/javac
	/usr/lib/jvm/java-8-oracle/bin/javac    <= location of javac binary
	/usr/lib/jvm/java-8-oracle 				<= actual Java home
	
	### Link to Maven
	$readlink -f /usr/bin/mvn				
	/usr/share/maven						<= actual Java home
	
	Gmail SMTP setup
	https://forums.manning.com/posts/list/37845.page
	https://support.google.com/mail/answer/7126229?visit_id=1-636219623955807379-3302631064&rd=2#cantsignin
	** Login to Gmail and set less security  turn on <- Stupidity!!  security on/off?
	
	Check settings in Jenkins
	$ cat /var/lib/jenkins/hudson.tasks.Mailer.xml
	
	POM.XML
	A Project Object Model is for Maven that contains project and configuration details.
	https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
	
	
	Jenkins 
	# Line Coverage for Jacoco plugin (Java Code Coverage)
	
	
	
### Jenkins Master <-> Slave setup
	# On Remote 
	install JAVA and /var/jenkins folder
	set permission own by ssh user account for /var/jenkins
	
### On Jenkins Master
	Manage Jenkins -> Manage Nodes  ->




	
######################################################################	
WebGL https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API
	(Web Graphics Library) is a JavaScript API for rendering interactive 3D and 2D graphics 
	within any compatible web browser without the use of plug-ins. WebGL does so by introducing 
	an API that closely conforms to OpenGL ES 2.0 that can be used in HTML5 <canvas> elements.	
	
	
	
	
######################################################################	
Unity
	
			
######################################################################	










################# Multi port Iptables ##########################################
# 8140 Puppet/ 8142 Agent
-A INPUT -m state --state NEW -m tcp -p tcp -s 178.62.132.100/32 -m multiport --dports 22,443,8140,8142 -j ACCEPT

# private sector
-A INPUT -m state -s 10.128.44.59/32 --state NEW -j ACCEPT
###############################################################################

























### CentOS7 creating jenkins.service
https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units
https://www.digitalocean.com/community/tutorials/how-to-set-up-jenkins-for-continuous-development-integration-on-centos-7


$ vi /etc/systemd/system/jenkins.service
-----------------------------------------------------------
[Unit]
Description=Jenkins Service
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/bin/java -jar /usr/local/bin/jenkins.war
Restart=on-abort

[Install]
WantedBy=multi-user.target
-----------------------------------------------------------

[Unit] 	The bracketed text denotes a section heading. This means that, for instance, [Service] declares a section called 
		"Service," and all the assignments below it contain relevant information that the system will then know how to 
		find and relate to the section header.

		A configuration file, this one included, is typically a text file – meaning it has no intrinsic meaning to the computer. 
		Rather, the text file will be parsed by some process, and that process will use the headings and other information to 
		find its way around. For this reason, it's technically irrelevant how a given configuration file is laid out – as long 
		as the program which reads it can understand what everything means.

		The first section, Unit, contains only two configuration directives. 
Description=Jenkins Service  <= The first is simply a name. 
After=network.target		 <= States what service, if any, is necessary for the current service to start.

[Service]	the Type directive allows you to select what type of startup this service will use. 
Type=simple  <= the process noted in the later directive ExecStart will be the primary 
				process of the service being created. Really, type is unnecessary, as simple is assumed when type is 
				unspecified, but we are leaving it in for clarity.

User=root	<= User specifies which user has control over this process, and Restart is used to indicate that, 
				in this case, if the process terminates but the exit code implies error, the service will be 
				restarted. This is useful in maintaining the continuity of the service in case of unexpected crashes.
ExecStart=/usr/bin/java -jar /usr/local/bin/jenkins.war
			As mentioned, ExecStart is the directive where we indicate what process is to become the main action of the service. 
			This directive represents the main wrapper for Jenkins – the service will run the WAR through Java rather 
			than treating it a foreground process.

[Install]	multi-user.target indicates a target, called a runlevel prior to CentOS 7. It provides for the system 
			a sense of what resources to provide this service and what amount of intensity will be required by the user.

Once your file is created and saved, you should be able to start up your new Jenkins service!
$ sudo systemctl daemon-reload

$ sudo systemctl start jenkins.service




























1. Puppet Agent install
cd ~; wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
sudo dpkg -i puppetlabs-release-trusty.deb
sudo apt-get update
sudo apt-get install puppet -y
sudo /etc/init.d/apache2 stop

sudo vi /etc/default/puppet
START=yes		<= change from no to yes

# Lock the version
sudo vi /etc/apt/preferences.d/00-puppet.pref
###
# /etc/apt/preferences.d/00-puppet.pref
Package: puppet puppet-common
Pin: version 3.8*
Pin-Priority: 501
###

sudo vi /etc/puppet/puppet.conf
###
	* Remove templatedir lile
	* Remove [master] section
	
[agent]
server = cdn-puppet.namcowireless.com
###


echo "10.134.8.185 cdn-puppet.namcowireless.com" >> /etc/hosts

$ sudo service puppet start


###Change Timezone in PM to apply to rest of servers ###
vi /etc/puppet/manifests/site.pp

### PST ###
class { 'timezone':
    timezone => 'America/Los_Angeles'
}
### UTC ###
class { 'timezone':
    timezone => 'UTC'
}






	puppet cert list
	puppet cert sign (--all)
	puppet cert clean $hostname 
	puppet cert list --all
	
# Resource
	puppet resource -t (or --types)		<=
# Manifest
	Puppet programs that contains list of system stats (Resource declarations)
# Classes
	Code blocks that can be called in a code elsewhere.  Reuses the Puppet codes & manifest
# Class Definition
	









### How to set up Jenkins CI on a Mac




### nvm (node version manager)
	Simple bash script to manage multiple active node.js versions
	https://github.com/creationix/nvm

### npm (node package manager) 
	the default package manager for the JavaScript runtime environment Node.js.



	

### Install AWS CLI
$ aws configure
AWS Access Key ID [****************3QNA]:
AWS Secret Access Key [****************jnlW]:
Default region name [us-west-1]:
Default output format [None]:

---------------------------------------------------------------------------------------------------------
#!/usr/bin/env python

MONOCLE_URGENT_TOPIC='arn:aws:sns:us-west-2:307472006364:MONOCLE_Urgent'
MONOCLE_WARNING_TOPIC='arn:aws:sns:us-west-2:307472006364:MONOCLE_Warning'

	# arn : amazon resource name
	# aws : aws
	# sns : aws simple notification service
	# us-west-2 : region
	# 307472006364 : account id
	# MONOCLE_Warning : resource

	# boto: A Python interface to Amazon Web Services
	# http://boto.cloudhackers.com/en/latest/getting_started.html
	# yum install -y python-pip  	 	# pip install --upgrade pip
	# pip install boto  		    	# http://boto.cloudhackers.com/en/latest/getting_started.html

	# Check boto version
		$ vi boto_version_check.py
		!/usr/bin/python
		import boto
		print boto.Version
		--------------------
		$ python boto_version_check.py
		2.45.0
		
	# AWS Region Code Name http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
	# us-east-1  <= US East (N. Virginia)
	# us-east-2  <= US East (Ohio)
	# us-west-1  <= US West (N. California)
	# us-west-2	 <= US West (Oregon)

	### CLI configuration
	# http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
	# https://www.linux.com/blog/introduction-aws-command-line-tool



	
import os, sys, boto
from boto.ec2.cloudwatch 		import CloudWatchConnection
from boto.ec2.cloudwatch.alarm 	import MetricAlarm

# include file name common.py
import common	
---------------------------------------------------------------------------------------------------------


	


### Restart from Web
	Jenkins_address/safeRestart
	
### AWS CLI testing
	$ aws iam apark
	
	
	
	
	
