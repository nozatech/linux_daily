Jenkins vs Travis
http://stackoverflow.com/questions/32422264/jenkins-vs-travis-ci-which-one-would-you-use-for-a-open-source-project


### Create an user account
1. Create from 	-> Manage Users
2. Add user 	-> Configure Global Security
3. Give permissions

### Restart from Web
	https://Jenkins_address:8080/safeRestart		<= Restart from web
	
	
	

https://dzone.com/articles/jenkins-operations-center-tutorial-cjoc
# Jenkins Operation Center(Cloudbee)
The CJOC is used for managing multiple Jenkins Masters. It makes it much easier to scale Jenkins 
horizontally, as it makes it possible to share build nodes between masters. You can also enforce 
security compliance, manage update centers, set up single sign on, and monitor everything all 
from the CJOC.

# Client Master
	A client master is just a normal Jenkins master that we’ve joined to our Operations center 
	cluster for management purposes.
	These masters can then use normal slaves, shared slaves, or a shared cloud.

# Shared slaves  
	slave nodes that are available for any master to use.
	
# A shared cloud 
	spin up temporary slaves when demand exceeds what’s available from the shared slaves.

	
AWS Jenkins HA setup using NFS(Shared Disk)
https://www.youtube.com/watch?v=zHavme2iaFA



Nexus Repository
https://www.youtube.com/watch?v=XzJ2FnIapAE



					  |-> Artifacotry, Nexus, S3
Dev -> Git -> JENKINS |-> Test
					  |-> UAT(User acceptance Testing)
					  |-> Production


**UAT -> Unit Testing -> Integration -> System -> Acceptance testing					  
**GIT -> initial build -> code quality -> deploy to test -> deploy to UAT -> Deploy to Prod
		
					  
### Binary or Artifact management
https://en.wikipedia.org/wiki/Binary_repository_manager

					  

### Jenkins installation method list
1. Apache2 + Jenkins + Java
2. NginX + Apache2 + Jenkins + Java
3. Java + Jenkins.war
4. Tomcat + Jenkins + Java
5. Dockers + Jenkins
6. Windows install


------------------------------------------------------------------------------
in-house 	→ Jenkins or gitlab-ci
Github.com 	→ Travis-CI
------------------------------------------------------------------------------
1. Setting up CI for a project:
	Travis : comes in first place.. It's very easy to setup. Takes less than a minute to 
			setup with github. -- Login to github - create web hook for Travis - 
			back to Travis (https://travis-ci.org/) - login with github credentials and 
			sync your github repo and enable Push and Pull requests. Very Easy Setup in Travis..
	Jenkins: Create an Environment (Master Jenkins) - create web hooks - configurations 
			on each job (takes time compare to Travis)

2. Re-run the builds:
	Travis : Who ever is having write access on github they can re-run the build 
			by clicking on restart build
	Jenkins: re-run the build based on phrase: provide phrase text in PR/commit
			description like reverify jenkins

3. Controlling environment:
	Travis : Travis provides hosted environment, Travis installs required softwares 
			for every build is a time consuming process.
	Jenkins: It's a onetime setup, Install all the required softwares in node/slave 
			machine and perform all the tests on pre-installed environment.

4. Build Logs:
	Travis : Supports build logs to place in Amazon S3.
	Jenkins: Easy to setup with build artifacts plugin(Artifactory, Nexus, S3).

------------------------------------------------------------------------------


### JENKINS_HOME directory structure

 +- config.xml     				(jenkins root configuration)
 +- *.xml          				(other site-wide configuration files)
 +- userContent    				(files in this directory will be served under your http://server/userContent/)
 +- fingerprints   				(stores fingerprint records)
 +- plugins        				(stores plugins)
 +- workspace 					(working directory for the version control system)
     +- [JOBNAME] 				(sub directory for each job)
 +- jobs
     +- [JOBNAME]      			(sub directory for each job)
         +- config.xml     		(job configuration file)
         +- latest         		(symbolic link to the last successful build)
         +- builds
             +- [BUILD_ID]      (for each build)
                 +- build.xml   (build result summary)
                 +- log         (log file)

				 
### Moving/copying/renaming jobs 
https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins
$ rename 's/\s/_/g' *



------------------------------------------------------------------------------
1. Jenkins install 
------------------------------------------------------------------------------	
### Web Server install	
	apt-get -y install apache2

### System update
	apt-get update && apt-get upgrade -y

### Java Install
	# Ubuntu
	apt-get -y install openjdk-7-jdk
	java -version
	
	# CentOS
	$ sudo yum install java-1.7.0-openjdk-devel

	
### Jenkins Setup
	wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
	sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
	apt-get update
	apt-get -y install jenkins

###  Check Reverse Proxy
	curl -iL -e http://cdn-jenkins.namcowireless.com:8080/jenkins/manage\
    http://cdn-jenkins.namcowireless.com:8080/jenkins/administrativeMonitor/hudson.diagnosis.ReverseProxySetupMonitor/test

2. Java Environment set

	$ apt-get install -y maven git-core 
	$ javac -version									<= java compiler
	$ mvn -version
	$ git --version

	$ readlink -f /usr/bin/javac						<= java compiler pointing 
	/usr/lib/jvm/java-7-openjdk-amd64/bin/javac
	
	

### Ubuntu 16.04 Iptables setup ###
	http://linux-sys-adm.com/ubuntu-16.04-lts-how-to-configure-firewall-iptables-fail2ban/
	https://oitibs.com/easy-ubuntu-16-server-firewall/
	
	# Install IPTables Persistent Package 
	$ apt-get install -y iptables-persistent

	# Add netfilter-persistent Startup
	$ invoke-rc.d netfilter-persistent save
	
	$ service netfilter-persistent stop
	
	### After Edit IPtables ##
	# Start netfilter-persistent Service
	
	$ service netfilter-persistent start
	
	$ iptables -nL	

------------------------------------------------------------------------------	
### Java 8 install
------------------------------------------------------------------------------
	sudo add-apt-repository ppa:webupd8team/java
	sudo apt update; sudo apt install oracle-java8-installer
	javac -version	# java -version
	
	
	#### Apache Proxy 80 to 8080 using Proxy modules ###
	
	sudo a2enmod proxy
    sudo a2enmod proxy_http
	
	
	vi /etc/apache2/sites-available/jenkins.conf
	----------------------------------------------
	<VirtualHost *:80>
        ServerName 45.55.80.156
        ProxyRequests Off
        <Proxy *>
                Order deny,allow
                Allow from all
        </Proxy>
        ProxyPreserveHost on
        ProxyPass / http://localhost:8080/
	</VirtualHost>
	----------------------------------------------
	$ apachectl configtest
    $ systemctl restart apache2
	
	
	https://www.youtube.com/watch?v=0ZS2BL5R3Ow&t=2s
	https://gist.github.com/jsuwo/9038610
	
	"Manage Jenkins -> Global Tool Configuration"
	apt-get install maven git-core
	javac -version
	mvn -version
	git --version
	
	### Link to Javac
	$ readlink -f /usr/bin/javac
	/usr/lib/jvm/java-8-oracle/bin/javac    <= location of javac binary
	/usr/lib/jvm/java-8-oracle 				<= actual Java home
	
	### Link to Maven
	$readlink -f /usr/bin/mvn				
	/usr/share/maven						<= actual Java home
	
	Gmail SMTP setup
	https://forums.manning.com/posts/list/37845.page
	https://support.google.com/mail/answer/7126229?visit_id=1-636219623955807379-3302631064&rd=2#cantsignin
	** Login to Gmail and set less security  turn on <- Stupidity!!  security on/off?
	
	Check settings in Jenkins
	$ cat /var/lib/jenkins/hudson.tasks.Mailer.xml
	
	POM.XML
	A Project Object Model is for Maven that contains project and configuration details.
	https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
	
	
	Jenkins 
	# Line Coverage for Jacoco plugin (Java Code Coverage)
	
	
	
### Jenkins Master <-> Slave setup
	# On Remote 
	install JAVA and /var/jenkins folder
	set permission own by ssh user account for /var/jenkins
	
### On Jenkins Master
	Manage Jenkins -> Manage Nodes  ->




	
######################################################################	
WebGL https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API
	(Web Graphics Library) is a JavaScript API for rendering interactive 3D and 2D graphics 
	within any compatible web browser without the use of plug-ins. WebGL does so by introducing 
	an API that closely conforms to OpenGL ES 2.0 that can be used in HTML5 <canvas> elements.	
	
	

################# Multi port Iptables ##########################################
# 8140 Puppet/ 8142 Agent
-A INPUT -m state --state NEW -m tcp -p tcp -s 178.62.132.100/32 -m multiport --dports 22,443,8140,8142 -j ACCEPT

# private sector
-A INPUT -m state -s 10.128.44.59/32 --state NEW -j ACCEPT
###############################################################################

-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------
### CentOS7 creating jenkins.service

https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units
https://www.digitalocean.com/community/tutorials/how-to-set-up-jenkins-for-continuous-development-integration-on-centos-7


$ vi /etc/systemd/system/jenkins.service
-----------------------------------------------------------
[Unit]
Description=Jenkins Service
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/bin/java -jar /usr/local/bin/jenkins.war
Restart=on-abort

[Install]
WantedBy=multi-user.target
-----------------------------------------------------------


[Unit] 	The bracketed text denotes a section heading. This means that, for instance, [Service] declares a section called 
		"Service," and all the assignments below it contain relevant information that the system will then know how to 
		find and relate to the section header.

		A configuration file, this one included, is typically a text file – meaning it has no intrinsic meaning to the computer. 
		Rather, the text file will be parsed by some process, and that process will use the headings and other information to 
		find its way around. For this reason, it's technically irrelevant how a given configuration file is laid out – as long 
		as the program which reads it can understand what everything means.

		The first section, Unit, contains only two configuration directives. 
Description=Jenkins Service  <= The first is simply a name. 
After=network.target		 <= States what service, if any, is necessary for the current service to start.

[Service]	the Type directive allows you to select what type of startup this service will use. 
Type=simple  <= the process noted in the later directive ExecStart will be the primary 
				process of the service being created. Really, type is unnecessary, as simple is assumed when type is 
				unspecified, but we are leaving it in for clarity.

User=root	<= User specifies which user has control over this process, and Restart is used to indicate that, 
				in this case, if the process terminates but the exit code implies error, the service will be 
				restarted. This is useful in maintaining the continuity of the service in case of unexpected crashes.
ExecStart=/usr/bin/java -jar /usr/local/bin/jenkins.war
			As mentioned, ExecStart is the directive where we indicate what process is to become the main action of the service. 
			This directive represents the main wrapper for Jenkins – the service will run the WAR through Java rather 
			than treating it a foreground process.

[Install]	multi-user.target indicates a target, called a runlevel prior to CentOS 7. It provides for the system 
			a sense of what resources to provide this service and what amount of intensity will be required by the user.

Once your file is created and saved, you should be able to start up your new Jenkins service!


$ sudo systemctl daemon-reload

$ sudo systemctl start jenkins.service
------------------------------------------------------------------------------







------------------------------------------------------------------------------
1. Puppet Agent install
------------------------------------------------------------------------------
cd ~; wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
sudo dpkg -i puppetlabs-release-trusty.deb
sudo apt-get update
sudo apt-get install puppet -y
sudo /etc/init.d/apache2 stop

sudo vi /etc/default/puppet
START=yes		<= change from no to yes

# Lock the version
sudo vi /etc/apt/preferences.d/00-puppet.pref
###
# /etc/apt/preferences.d/00-puppet.pref
Package: puppet puppet-common
Pin: version 3.8*
Pin-Priority: 501
###

sudo vi /etc/puppet/puppet.conf
###
	* Remove templatedir lile
	* Remove [master] section
	
[agent]
server = cdn-puppet.namcowireless.com
###


echo "10.134.8.185 cdn-puppet.namcowireless.com" >> /etc/hosts

$ sudo service puppet start


###Change Timezone in PM to apply to rest of servers ###
vi /etc/puppet/manifests/site.pp

### PST ###
class { 'timezone':
    timezone => 'America/Los_Angeles'
}
### UTC ###
class { 'timezone':
    timezone => 'UTC'
}






	puppet cert list
	puppet cert sign (--all)
	puppet cert clean $hostname 
	puppet cert list --all
	
# Resource
	puppet resource -t (or --types)		<=
# Manifest
	Puppet programs that contains list of system stats (Resource declarations)
# Classes
	Code blocks that can be called in a code elsewhere.  Reuses the Puppet codes & manifest
# Class Definition
------------------------------------------------------------------------------	








------------------------------------------------------------------------------
### How to set up Jenkins CI on a Mac
------------------------------------------------------------------------------


### nvm (node version manager)
	Simple bash script to manage multiple active node.js versions
	https://github.com/creationix/nvm

### npm (node package manager) 
	the default package manager for the JavaScript runtime environment Node.js.



	
------------------------------------------------------------------------------
### Install AWS CLI
------------------------------------------------------------------------------
$ aws configure
AWS Access Key ID [****************3QNA]:
AWS Secret Access Key [****************jnlW]:
Default region name [us-west-1]:
Default output format [None]:

---------------------------------------------------------------------------------------------------------
#!/usr/bin/env python

MONOCLE_URGENT_TOPIC='arn:aws:sns:us-west-2:307472006364:MONOCLE_Urgent'
MONOCLE_WARNING_TOPIC='arn:aws:sns:us-west-2:307472006364:MONOCLE_Warning'

	# arn : amazon resource name
	# aws : aws
	# sns : aws simple notification service
	# us-west-2 : region
	# 307472006364 : account id
	# MONOCLE_Warning : resource

	# boto: A Python interface to Amazon Web Services
	# http://boto.cloudhackers.com/en/latest/getting_started.html
	# yum install -y python-pip  	 	# pip install --upgrade pip
	# pip install boto  		    	# http://boto.cloudhackers.com/en/latest/getting_started.html

	# Check boto version
		$ vi boto_version_check.py
		!/usr/bin/python
		import boto
		print boto.Version
		--------------------
		$ python boto_version_check.py
		2.45.0
		
	# AWS Region Code Name http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
	# us-east-1  <= US East (N. Virginia)
	# us-east-2  <= US East (Ohio)
	# us-west-1  <= US West (N. California)
	# us-west-2	 <= US West (Oregon)

	### CLI configuration
	# http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
	# https://www.linux.com/blog/introduction-aws-command-line-tool



	
import os, sys, boto
from boto.ec2.cloudwatch 		import CloudWatchConnection
from boto.ec2.cloudwatch.alarm 	import MetricAlarm

# include file name common.py
import common	
---------------------------------------------------------------------------------------------------------


	
	
### AWS CLI testing
	$ aws iam user_id
	

------------------------------------------------------------------------------
Backup using thinbackup and S3cmd
------------------------------------------------------------------------------	
0 6 * * *     bash -l -c 's3cmd sync Backup/ s3://outcast-dev/jenkins_backup/' >> /Users/Shared/Jenkins/backup_log
	

### On Jenkins thinbackup setup	

Backup settings
Backup directory	 						${HOME}/Backup ('/Users/Shared/Jenkins/Backup'0
Backup schedule for full backups			H 2 * * *
Backup schedule for differential backups	H/15 * * * *
Max number of backup sets					10
Files excluded from backup (regular expression)	
'check' Wait until Jenkins/Hudson is idle to perform a backup	
Force Jenkins to quiet mode after specified minutes		180
'check' Backup build results	
'check' Backup next build number file	Help for feature: Backup next build number file
'check' Clean up differential backups	Help for feature: Clean up differential backups
'check' Move old backups to ZIP files	



##########
### P4 ###   Binary needs to be installed 
##########
https://community.perforce.com/s/article/2600
Error Msg "Certificate date range invalid."
*** Server's SSL Cert has been expired ***

$ p4 -V
------------------------------------------------------------------------------
Perforce - The Fast Software Configuration Management System.
.....
Version of OpenSSL Libraries: OpenSSL 1.0.2k  26 Jan 2017
Rev. P4/MACOSX105X86_64/2016.2/1509269 (2017/04/27).
------------------------------------------------------------------------------

$ p4 -ztag info
******* WARNING P4PORT IDENTIFICATION HAS CHANGED! *******
It is possible that someone is intercepting your connection
to the Perforce P4PORT '10.10.100.80:1666'
If this is not a scheduled key change, then you should contact
your Perforce administrator.
The fingerprint for the mismatched key sent to your client is
DC:5C:8F:....
To allow connection use the 'p4 trust' command.


$ export P4PORT=ssl:10.xx.xx.xx:1666

# Install
$ p4 trust -i 38:E7:8C:AE:8F:5C:FE:97:xxxxx

$ p4 trust -i DC:5C:8F:46:FC:.... 		### 11/1/2019 by CLI###
******* WARNING P4PORT IDENTIFICATION HAS CHANGED! *******
It is possible that someone is intercepting your connection
to the Perforce P4PORT '10.10.100.80:1666'
If this is not a scheduled key change, then you should contact
your Perforce administrator.
The fingerprint for the mismatched key sent to your client is
DC:5C:8F:4....
Added trust for P4PORT 'ssl:10.10.100.80:1666' (10.10.100.80:1666)



# Installed List
$ p4 trust -l
$ p4 info
$ p4 -p ssl:10.xx.xx.xx:1666 info

User name: axxxx
Client name: jenkins-resign
Client host: jenkins-resign.local
Client unknown.
Current directory: /Users/user_id
Peer address: 10.xx.xx.xx:49197
Client address: 10.xx.xx.xx
Server address: perforce.local:1666
Server root: /home/perforce
Server date: 2017/05/08 10:03:15 -0700 PDT
Server uptime: 3159:29:00
Server version: P4D/LINUX26X86_64/2015.1/1240625 (2015/09/29)
Server encryption: encrypted
Server cert expires: Oct 17 22:03:00 2017 GMT
Server license: Company Inc. 51 users (support expired 2017/03/30)
Server license-ip: 10.xx.xx.xx:1666
Case Handling: sensitive


### Login test
$ p4 -u jenkins_user_id login -a	






--------------------------------------------------------------------------------
$ p4 --help
--------------------------------------------------------------------------------
Usage:

    p4 [ options ] command [ arg ... ]

    Options:
        -b batchsize    specify a batchsize to use with -x (default 128)
        -h -?           print this message
        -s              prepend message type to each line of server output
        -v level        debug modes
        -V              print client version
        -x file         read named files as xargs
        -G              format input/output as marshalled Python objects
        -z tag          format output as 'tagged' (like fstat)
        -I              show progress indicators

        -c client       set client name (default $P4CLIENT)
        -C charset      set character set (default $P4CHARSET)
        -d dir          set current directory for relative paths
        -H host         set host name (default $P4HOST)
        -L language     set message language (default $P4LANGUAGE)
        -p port         set server port (default $P4PORT)
        -P password     set user's password (default $P4PASSWD)
        -q              suppress all info messages
        -r retries      Retry command if network times out
        -Q charset      set command character set (default $P4COMMANDCHARSET)
        -u user         set user's username (default $P4USER)

    The Perforce client 'p4' requires a valid Perforce server network
    address 'P4PORT' for most operations, including its help system.
    Without an explicit P4PORT, the Perforce client will use a default
    P4PORT of 'perforce:1666'.  That is to say, the host is named 'perforce'
    and the port number is '1666'.

    The Perforce client accepts configuration via command-line options,
    P4CONFIG files, environmental variables and on Windows, the registry.
    Run 'p4 set' to list the client's current settings.

    Run 'p4 help' to ask the Perforce server for information on commands.

    For administrators, see the Perforce server's help output in 'p4d -h'.

    For further information, visit the documentation at www.perforce.com.
--------------------------------------------------------------------------------

OSX: 
### How to start/stop/restart launchd services from the command line?
https://serverfault.com/questions/194832/how-to-start-stop-restart-launchd-services-from-the-command-line
https://stackoverflow.com/questions/6959327/how-to-stop-jenkins-installed-on-mac-snow-leopard


$ brew services start jenkins-lts
Could not find domain for		<= ERROR

Fix: use VNC to Remote Desktop In, login as Jenkins user.


### From Mac OSX SHELL Start | Restart ###

# SSH Start | Stop
	$ sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist 
	$ sudo launchctl unload  /System/Library/LaunchDaemons/ssh.plist 
	$ sudo launchctl reload  /System/Library/LaunchDaemons/ssh.plist 



# Jenkins Start	| Start | Restart
$ sudo launchctl load   /Library/LaunchDaemons/org.jenkins-ci.plist
$ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
$ sudo launchctl reload /Library/LaunchDaemons/org.jenkins-ci.plist

	 sudo launchctl list | grep ssh
	
### Restart From Web command ###
http://10.100.200.45:8080/restart
Forces a restart without waiting for builds to complete.

http://10.100.200.45:8080/safeRestart 
Allows all running jobs to complete. New jobs will remain in the queue to run after the restart is complete
	
	
### OSX Version Check from Shell
$ sw_vers

ProductName:    Mac OS X
ProductVersion: 10.12.6
BuildVersion:   16G29



### Mac OSX - Jenkins setup 
https://medium.com/@ved.pandey/setting-up-jenkins-on-mac-osx-50d8fe16df9f
Prereqs:
 A Mac Machine running Mac OSX Yosemite or higher with admin access. 
 Java Development Kit should be installed on the machine.
 Access to a remote repository on Git, Svn etc.

1. Download Jenkins installer .pkg file from Jenkins official site
2. SETTING UP JENKINS USER
We need to give Jenkins admin access,

# Stop and Start Jenkins' Service
unload Jenkins as a Daemon:
$ sudo launchctl unload   /Library/LaunchDaemons/org.jenkins-ci.plist

Next, move the .plist file, which defines how Jenkins will run, to the LaunchAgents folder:


$ sudo mv /Library/LaunchDaemons/org.jenkins-ci.plist     /Library/LaunchAgents/


Jenkins Home Directory
Jenkins -> Configuration-> Home Directory
	e.g./User/Shared/Jenkins/Home
	


### Remove Slave Nodes	
Jenkins -> Manage Jenkins -> Script Console -> Paste and Run
### Remove Off line Slave Nodes	
https://stackoverflow.com/questions/24072354

Jenkins -> Manage Jenkins -> Script Console -> Paste and Run 
-------------------------------------------------------------------
for (aSlave in hudson.model.Hudson.instance.slaves) {
    if (aSlave.getComputer().isOffline()) {
        aSlave.getComputer().setTemporarilyOffline(true,null);
        aSlave.getComputer().doDoDelete();
    }
}	
-------------------------------------------------------------------


### keystore
https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html
https://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html
https://support.globalsign.com/customer/en/portal/articles/2121490-java-keytool---create-keystore

Example:
http://10.100.200.45:8080/view/ToonSquad/job/ToonSquad_Android_Pull_HA_Staging_Build/configure
BNEA_Android_Keystore_To_Use=Cartoon_Clash
BNEA_Android_Key_To_Use=cartoon_clash



http://10.100.200.45:8080/view/DrWho/job/DoctorWho_Android_Pull_HA_Dev_Build/configure
BNEA_Android_Keystore_To_Use=DOCTOR_WHO
BNEA_Android_Key_To_Use=doctor_who



$ keytool -genkey -alias DOCTOR_WHO -keyalg RSA -keystore DOCTOR_WHO.jks -keysize 2048 -validity 7300
Enter keystore password: doctor_who


What is your first and last name?
	Bxxxx
What is the name of your organizational unit?
    Bxxx
What is the name of your organization?
   DoctorWho
What is the name of your City or Locality?
	Sxxxx
What is the name of your State or Province?
	CA
What is the two-letter country code for this unit?
	us
Is CN=Bxxx, OU=Baxxxx, O=DoctorWho, L=Sxxxx, ST=CA, C=us correct?
  [no]:  yes

Enter key password for <DOCTOR_WHO>
        (RETURN if same as keystore password):	doctor_who
Re-enter new password:	doctor_who


$ ls -l
-rw-rw-r--. 1 apark apark 2266 Mar 15 15:22 KeyStore.jks


fI&xxxxxx 
keystore password is just 'xxxxxxxx'




# Delete view 
http://10.100.200.45:8080/view/<view name>/delete
http://10.100.200.45:8080/view/Monocle/delete	<= delete view name



# Migration - MacOS Jenkins-A to another Jenkins-B 
move the files from your Jenins-A ==>> Jenins-B
Copy Jenins-A's /User/Shared/Jenkins/Home 
Paste Jenkins-B's /User/Shared/Jenkins/Home(or different directory)  

$ echo "export JENKINS_HOME=/Users/myUsername/jenkins" >> ~/.bashrc && source ~/.bashrc



-----------------------------------------------------------------------------------
# Perforce Connection issue 
-----------------------------------------------------------------------------------
******* WARNING P4PORT IDENTIFICATION HAS CHANGED! *******
It is possible that someone is intercepting your connection
to the Perforce P4PORT '10.10.100.80:1666'
If this is not a scheduled key change, then you should contact
your Perforce administrator.
The fingerprint for the mismatched key sent to your client is
E1:2E:A7:5C:00:5E:5A:B4:7B:F5:31:3A:86:5A:9F:A6:AC:27:76:23
To allow connection use the 'p4 trust' command.

  p4 set P4PORT=ssl:10.10.100.80:1666
  p4 set P4USER=jenkins_user_id
  p4 set P4PASSWD=xxxx
  p4 trust -f
  p4 info





-----------------------------------------------------------------------------------
# Jenkins Mac to Mac Migration
-----------------------------------------------------------------------------------

# User accounts have been overwrited and can't login
vi /Users/jenkins/.jenkins/config.xml
 curity>false</useSecurity>




# Jenkins Setup http://10.100.200.43:8080/

https://www.macminivault.com/installing-jenkins-on-macos/
http://10.100.200.43:8080/

Jenkins Restart
http://10.100.200.43:8080/safeRestart


### Login to Jenkins using VNC to MAC(GUI) first as Jenkins 

[sudo] brew services list
#-----------------------------------------------------------------------------------
 brew services start | stop | restart   jenkins-lts
#-----------------------------------------------------------------------------------


 brew services status jenkins-lts
Error: Unknown command `status`!
Usage: brew services subcommand:

Manage background services with macOS' launchctl(1) daemon manager

     --all                           run subcommand on all services.

[sudo] brew services list

List all running services for the current user (or root).

[sudo] brew services run (formula|--all)

Run the service formula without registering to launch at login (or boot).

[sudo] brew services start (formula|--all)

Start the service formula immediately and register it to launch at login (or
boot).

[sudo] brew services stop (formula|--all)

Stop the service formula immediately and unregister it from launching at login
(or boot).

[sudo] brew services restart (formula|--all)

Stop (if necessary) and start the service formula immediately and register it
to launch at login (or boot).

[sudo] brew services cleanup

Remove all unused services.

If sudo is passed, operate on /Library/LaunchDaemons (started at boot).
Otherwise, operate on ~/Library/LaunchAgents (started at login).







Issue: 
clang: error: unable to locate xcodebuild


sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer 


time rsync -av --delete -e "ssh -i /root/.ssh/<keyfile>" /var/lib/jenkins/* <targethost>:/var/lib/jenkins/

rsync -av user@1.2.3.4:/var/lib/jenkins /var/lib --exclude workspace/ --exclude cache/ --exclude .cache/ --exclude node_modules/ --exclude .npm/

# Jenkins -> Manage Jenkins -> Configure Global Security





# Mac OS KeyChain Access
Password save program

e.g.  gmail.com
'Save Password'	=> will save into


# Check KeyChain is actually valid

$ security find-identity -p codesigning

### Can't read any 
Policy: Code Signing
  Matching identities
     0 identities found

  Valid identities only
     0 valid identities found

### Correct settings		<= Which CSR was generated and Resigned by Apple
Policy: Code Signing
  Matching identities
  1) 2BB03E54E955FB3FFE359B957451AC196F8718F7 "iPhone Distribution: BANDAI NAMCO ENTERTAINMENT AMERICA INC" (CSSMERR_TP_CERT_EXPIRED)
  2) 6BF96F8DEBABE0EE6F145C449B898E66A354E697 "iPhone Distribution: BANDAI NAMCO Entertainment America Inc. (BVL688YC98)" (CSSMERR_TP_CERT_EXPIRED)
     2 identities found

  Valid identities only
     0 valid identities found




To reset the jenkins admin password, You can simply disable the security in the config.xml file.

1. If your jenkins is running on the Linux OS, edit the below file.

vi /var/lib/jenkins/config.xml file.

2. Search for the word <useSecurity>true</useSecurity>
and change the word 'true' to 'false'.  

3. Restart the Jenkins server.
	service jenkins restart


4. Now go to Jenkins portal and set the password again.
go to 'Configure Global Security'
Authorization
	Matrix-based security


5. Enable the security again by changing settings to <useSecurity>true</useSecurity> and restart the Jenkins again.










Google Manual Resign
https://github.com/onbiron/apk-resigner
apk-resigner/signapk.sh PacMan_STAGING.apk       AndroidKeys.key          android            androiddebugkey






