#####################################################
### Puppet Master 3.8.7 Set up on Ubuntu 14.04LTS ###
#####################################################	
1. Change the hstname for Ubuntu 14.04
	$ hostnamectl set-hostname puppetmaster
	$ vi /etc/hosts
	127.0.0.1       localhost pm pm.localhost

2. On Cloudflare, careste DNS Arecord  
	puppetmaster.namcowireless.com

3. IPTables setup
	allow port 8140 for Puppet

4. NTP setup
	$ sudo ntpdate pool.ntp.org
	$ sudo apt-get -y update && sudo apt-get -y install ntp
	$ sudo vi /etc/ntp.conf
	###
	server 0.us.pool.ntp.org
	server 1.us.pool.ntp.org
	server 2.us.pool.ntp.org
	server 3.us.pool.ntp.org
	###
	
	$ sudo service ntp restart

	
5. Install Puppet Master
	$ cd /puppet; wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
	$ sudo dpkg -i puppetlabs-release-trusty.deb
	$ sudo apt-get update
	$ sudo apt-get -y install puppetmaster-passenger
	$ sudo service apache2 stop                   <== must stop
	# Check Puppet Version and lock it
	$ puppet -V
	  3.8.7
	$ sudo vi /etc/apt/preferences.d/00-puppet.pref
###
# /etc/apt/preferences.d/00-puppet.pref
Package: puppet puppet-common puppetmaster-passenger 
Pin: version 3.8*
Pin-Priority: 501
###







#################################################################################################
8. Configure Puppet Master
	"main" section contains global configuration, 
	"master" section is specific to the puppet master, 
	"agent" is used to configure the puppet agent.
	
	$ sudo vi /etc/puppet/puppet.conf
		###
		[main]
		logdir=/var/log/puppet
		vardir=/var/lib/puppet
		ssldir=/var/lib/puppet/ssl
		rundir=/var/run/puppet
		factpath=$vardir/lib/facter
		# templatedir=$confdir/templates			<= deprecated
		
		certname = puppet
		dns_alt_names = puppet,puppet.namcowireless.com
		
		[master]
		# These are needed when the puppetmaster is run by passenger
		# and can safely be removed if webrick is used.
		ssl_client_header = SSL_CLIENT_S_DN
		ssl_client_verify_header = SSL_CLIENT_VERIFY
		
		[agent]
		server = puppet
		###

		
7. Install Puppet Agent on Ubuntu 14(Trusty)
	$ sudo apt-get install -y puppet-agent
#	$ cd /puppet; wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb#
# 	$ sudo dpkg -i puppetlabs-release-trusty.deb
#	$ sudo apt-get update
#	$ sudo apt-get install -y puppet
	#The puppet agent is disabled by default. To change to yes.
	$ sudo vi /etc/default/puppet
	START=yes
	
	# Check Puppet Version and lock it
	$ puppet -V
	  3.8.7
	$ sudo vi /etc/apt/preferences.d/00-puppet.pref
###
# /etc/apt/preferences.d/00-puppet.pref
Package: puppet puppet-common 
Pin: version 3.8*
Pin-Priority: 501
###

	# Configure Agent
	$ sudo vi /etc/puppet/puppet.conf
		#Remove tmplatedir and [master] section
	
	[agent]
	server = puppetmaster.x.com

	$ sudo service puppet start


###### CentOS 6 AGENT Install ######
	### 3.8.x
	$ rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-6.noarch.rpm
	
	### 4.7.x
	$ rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm
	
	$ yum install puppet -y
	
	$ export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/puppetlabs/bin
### $ /usr/bin/puppet -V						<= puppet file location
###	# Change the path
### $ export PATH=$PATH:/usr/bin                <= for Bash	
	
		$ puppet -V	
	
	$ echo "[agent]" >> /etc/puppetlabs/puppet/puppet.conf
	$ echo "server = wput-puppet.namcowireless.com" >> /etc/puppetlabs/puppet/puppet.conf

### 3.8.x
###	$ vi /etc/puppet/puppet.conf
### 4.7.x
###	$ vi /etc/puppetlabs/puppet/puppet.conf
###
[agent]
server = puppetmaster.x.com
###	
	
	
	$ puppet resource package puppet ensure=latest
	


	$ /etc/init.d/puppet restart

### sign from Puppet server
$ puppet cert list 
$ puppet cert sign -a

### only node names ##
$ puppet cert list -a | awk '{print $2}' | sed 's/\"//g'
 
  wput-puppet.namcowireless.com

#+ "wput-puppet.namcowireless.com"   (SHA256) 42:74:82:0D:11:F1:8A:65:C3:
#  DF:93:3C:FA:87:1C:31:C7:5B:3C:22:E0:2D:C4:16:BC:BA:4E:DF:61:03:61:6C 
#  (alt names: "DNS:puppet", "DNS:puppet.namcowireless.com

# rerun from client
$puppet agent -t
	
	
	
	
	
	
###### CentOS 7 AGENT Install ######
	$ sudo rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
	$ sudo yum install puppet-agent
	$ sudo /opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true
	$ export PATH=$PATH:/opt/puppetlabs/bin
	
		# Error PATH=/sbin:/bin:/usr/sbin:/usr/bin:opt/puppetlabs/bin:/opt/puppetlabs/bin  <= opt don't have / in front!
		# Make correction!  export again with correct path!
			$ export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/puppetlabs/bin
	$ puppet -V 
		4.6.2
	
	$ systemctl status puppet 
	$ puppet agent -t --debug --verbose
	$ vi /etc/puppetlabs/puppet/puppet.conf
###
[agent]
server = puppet_master_IP
###




### Windows Agent install
download from https://downloads.puppetlabs.com/windows/
https://downloads.puppetlabs.com/windows/puppet-agent-x64-latest.msi
Install
puppet server :  wput-puppet.namcowireless.com












 
### Puppet Agent -t error
	# Error: Could not request certificate: Server hostname 'pm' did not match server certificate; 
	# Edit on server
	$ vi /etc/puppetlabs/puppet/puppet.conf
	### override
	certname = pm
	dns_alt_names = pm,pm.localdomain
	###
		$ systemctl restart puppetserver 

### Revert changes on client CentOS7  ###
$ puppet filebucket -l --bucket /opt/puppetlabs/puppet/cache/clientbucket/ restore /var/www/html/index.html 186c64b052c8fafdad721cb778a7bf4a
### REVIEW  using get ###
$ puppet filebucket -l --bucket /opt/puppetlabs/puppet/cache/clientbucket/ get /var/www/html/index.html 186c64b052c8fafdad721cb778a7bf4a







	
8. Set up a new "CERT"
	# Remove 1st time setup cert!        <= delete initial cert
	### Ubuntu 14 ###
	$ sudo rm -rf /var/lib/puppet/ssl  
	
	### CentOS7 ###
	$rm -rf /etc/puppetlabs/puppet/ssl

	
	### Generate NEW certificate
	$ sudo puppet master --verbose --no-daemonize
	 
Notice: Removing file Puppet::SSL::CertificateRequest wput-puppet at '/var/lib/puppet/ssl/ca/requests/wput-puppet.pem'
Notice: Removing file Puppet::SSL::CertificateRequest wput-puppet at '/var/lib/puppet/ssl/certificate_requests/wput-puppet.pem'

	$ Ctrl+c to exit
	  
	 
	  
	  
	  
	$ sudo puppet cert list -all		<= Check ALL cert list!
	+ "puppet" (SHA256) B2:....:38 (alt names: "DNS:puppet", "DNS:puppet.namcowireless.com")  <= Puppet Master HOST!!
   
	
	$ vi /etc/apache2/sites-available/puppetmaster.conf
		
		SSLCertificateFile      /var/lib/puppet/ssl/certs/pm.pem  						<= Correct the pem name
        SSLCertificateKeyFile   /var/lib/puppet/ssl/private_keys/pm.pem					<= Correct the pem name


		
		
		
		
	


	
###### Manifests ######
	- Node definitions
	- Variables
	- Resource declarations
	- Classes
	
	# creating node.pp file in manifest folder
	$ vi /etc/puppet/environments/production/manifests/node.pp

	
	
	
	
### node.pp contains each VM's names ###
node 'wiki' {
  file { '/info.txt':
    ensure   => 'present',
	content  => inline_template("Create by puppet at <%= Time.now %>\n"),  # inline_template function
	}
}
node 'wikitest' {
}
###	
		
		
11. Creating mutiple environment creation for dev, stage, production.	
	$ sudo touch /etc/puppet/manifests/site.pp  <= for initial setup
	
	$ mkdir -p /etc/puppet/environment/dev/{modules,manifests}
	$ mkdir -p /etc/puppet/environment/stage/{modules,manifests}
	
	$ mkdir -p /etc/puppet/environment/production/{modules,manifests}	
	$ vi /etc/puppet/environment/production/environment.conf

### Setting up environment variable ###
modulepath = /etc/puppet/environments/modules
environment_timeout = 5s
###
	
	### add variable into 
	$ vi /etc/puppet/puppet.conf
[master]
environmentpath = $confdir/environments
basemodulepath = $confdir/modules:/opt/puppet/share/modules

	
	
12. Starting Puppet Master
	$ sudo service apache2 start
	
	If failed, apr_sockaddr_info_get() failed for puppet, 
	edit /etc/hosts file adding 127.0.0.1 localhost puppet    <=
	
	
	
	
	
	
13. Install Puppet Agent
	
	$ puppet agent -t 						( or --test)<= polling from agent host
	$ service puppet restart				<= Check log from /var/log/syslog
		# Apr 11 09:58:40 u14lts puppet-agent[2708]: Reopening log files
	
	
	
	
	
	
	
	
	### Add new host to Puppet Master
	$ puppet cert list				 		<= check if there is new host to add
	
	$ puppet cert sign "host_name"		 	<= add to the list
	$ puppet cert sign --all		 		<= list of hosts that already added
	
	$ puppet cert clean hostname    		<= remove from list	
	# Removing file Puppet::SSL::CertificateRequest win2008.localdomain at '/var/lib/puppet/ssl/ca/requests/win2008.localdomain.pem'

	
	

	
#############################		
### Puppet module for AWS ###
#############################	

https://forge.puppet.com/puppetlabs/aws/0.2.0
https://github.com/puppetlabs/puppetlabs-aws
	
14. AWS Ruby SDK gems install
	$ gem install aws-sdk-core
	$ gem install retries
	
	### Install AWSCLI to configure access and secret keys for AWS credential
	$ apt-get install awscli
	$ aws configure
		AWS Access Key ID [****************RHBA]:
		AWS Secret Access Key [****************mOEE]:
		Default region name [None]:
		Default output format [None]:

		
#15. Set up an AWS Account    					<= AWSCLI is better solution!!!
#	$ export AWS_ACCESS_KEY_ID=******RHBA
#   $ export AWS_SECRET_ACCESS_KEY=*****RdmOEE
#	# lock to region( targeting a single region using an environment variable.)
#   $ export AWS_REGION=us-west-1

#	### Alternatively, create a file at ~/.aws/credentials 
#	[default]
#	aws_access_key_id = ******RHBA
#	aws_secret_access_key = *****RdmOEE
#	###	
	
	
	
16. Install puppet module	
	$ puppet module install puppetlabs-aws
		=>	/etc/puppet/environments/production/modules
			└── puppetlabs-aws (v1.4.0)
	

#	Fix for node_aws list  <= Deprecated!!! 
#	$ gem install guid
#	$ gem install fog
#	$ vi ~/.fog
#	###
#	:default:
#	  :aws_access_key_id = ******RHBA
#	  :aws_secret_access_key = *****RdmOEE
#	$ gem list		<= check installed list
#	https://gist.github.com/SydOps/e8ce055e60b3df2a3be4
#   $ puppet module install puppetlabs-cloud_provisioner
	
	

#17. A note on regions  <= Optional !!
# 	$ export AWS_REGION=us-west-1	  <= N. California		
	###
	Configuring the aws module using an ini file
	The AWS region and HTTP proxy can be provided in a file called puppetlabs_aws_configuration.ini in the Puppet confdir ($settings::confdir) using this format:
	###
	[default]
	region = us-west-1
	http_proxy = http://proxy.example.com:80
	###		
			
			
18.	Check ALL EC2 list on AWS				<= Output from live setup to copy for deploy!!!!!
	$ puppet resource ec2_instance	
	$ puppet resource ec2_instance region=us-west-1	
	$ puppet resource elb_loadbalancer
	$ puppet resource ec2_securitygroup 
	$ puppet resource ec2_securitygroup region=us-west-1

	
	

19.	Creating a stack on AWS

	#create a simple stack, with a load balancer, instances, and security groups.

                          WWW
                           +
                           |
          +----------------|-----------------+
          |     +----------v-----------+     |
    lb-sg |     |         lb-1         |     |
          |     +----+------------+----+     |
          +----------|------------|----------+
          +----------|------------|----------+
          |     +----v----+  +----v----+     |
          |     |         |  |         |     |
   web-sg |     |  web-1  |  |  web-2  |     |
          |     |         |  |         |     |
          |     +----+----+  +----+----+     |
          +----------|------------|----------+
          +----------|------------|----------+
          |     +----v----+       |          |
          |     |         |       |          |
    db-sg |     |  db-1   <-------+          |
          |     |         |                  |
          |     +---------+                  |
          +----------------------------------+
		  
##########################################################################
### Working code!!! init-vpc.pp creating VPC, Subnet, Gateway, Routes  ###	
##########################################################################
		  
dev-aws-setup.pp
#########################
### AWS DEV ENV setup ###
#########################

# 1st - Create Dev VPC
ec2_vpc { 'dev-vpc':
  ensure       => present,
  region       => 'us-west-1',
  cidr_block   => '10.0.0.0/16',
}

# 2nd - Create Security Groups
ec2_securitygroup { 'dev-sg':
  ensure      => present,
  region      => 'us-west-1',
  vpc         => 'dev-vpc',
  description => 'Security group for DEV SG for 10.0.0.0/0 VPC',
  ingress     => [{
    security_group => 'dev-sg',
  },{
    protocol => 'tcp',
    port     => 80,
    cidr     => '0.0.0.0/0'
  }],
}

# 3rd - Create Multizone subnets
# Zone-1a
ec2_vpc_subnet { 'dev-subnet-1a':
  ensure            => present,
  region            => 'us-west-1',
  vpc               => 'dev-vpc',
  cidr_block        => '10.0.0.0/24',
  availability_zone => 'us-west-1a',
  route_table       => 'dev-routes'
}

# Zone-1b
ec2_vpc_subnet { 'dev-subnet-1b':
  ensure            => present,
  region            => 'us-west-1',
  vpc               => 'dev-vpc',
  cidr_block        => '10.0.1.0/24',
  availability_zone => 'us-west-1b',
  route_table       => 'dev-routes'
}


# 4th - Create Internet gateway
ec2_vpc_internet_gateway { 'dev-igw':
  ensure => present,
  region => 'us-west-1',
  vpc    => 'dev-vpc',
}

# 5th - Create RouteTables
ec2_vpc_routetable { 'dev-routes':
  ensure => present,
  region => 'us-west-1',
  vpc    => 'dev-vpc',
  routes => [
    {
      destination_cidr_block => '10.0.0.0/16',
      gateway                => 'local'
    },{
      destination_cidr_block => '0.0.0.0/0',
      gateway                => 'dev-igw'
    },
  ],
}

###### Finished the DEV VPC ENV creation first ######

### 6th - Start creating the EC2 ###
# Zone-1a: Apps HTTP server
ec2_instance { 'dev-z1a-01':
  ensure              => present,
  availability_zone   => 'us-west-1a',
  image_id            => 'ami-48db9d28',
  instance_type       => 't2.micro',
  key_name            => 'puppetmaster',
  monitoring          => 'false',
  region              => 'us-west-1',
  security_groups     => ['dev-sg'],
  subnet              => 'dev-subnet-1a'
}

# Zone-1b: Apps HTTP server
ec2_instance { 'dev-z1b-01':
  ensure              => present,
  availability_zone   => 'us-west-1b',
  image_id            => 'ami-48db9d28',
  instance_type       => 't2.micro',
  key_name            => 'puppetmaster',
  monitoring          => 'false',
  region              => 'us-west-1',
  security_groups     => ['dev-sg'],
  subnet              => 'dev-subnet-1b'
}

# 7th - Creating ELB
elb_loadbalancer { 'dev-elb':
  ensure             => 'present',
  instances          => ['dev-z1a-01', 'dev-z1b-01'],
  listeners          => [{'instance_port' => '80', 'instance_protocol' => 'HTTP', 'load_balancer_port' => '80', 'protocol' => 'HTTP'}],
  region             => 'us-west-1',
  scheme             => 'internet-facing',
  security_groups    => ['dev-sg'],
  subnets            => ['dev-subnet-1a', 'dev-subnet-1b'],
}

# 8th - Creating DB 




###########################################################################################################
###########################################################################################################
 
 dev-destroy.pp

###############################
### Destroy the VPC Dev ENV ###
###############################

# 1st - Destroy the ELB
elb_loadbalancer { 'dev-elb':
  ensure              => absent,
  region              => 'us-west-1',
} ~>

# 1st - Destroy all EC2
ec2_instance { 'dev-z1a-01':
  ensure              => absent,
  region              => 'us-west-1',
} ~>

ec2_instance { 'dev-z1b-01':
  ensure              => absent,
  region              => 'us-west-1',
} ~>

# 2nd - Destroy SG
ec2_securitygroup { 'dev-sg':
  ensure      => absent,
  region      => 'us-west-1',
} ~>

# 3rd - Destroy IGW
ec2_vpc_internet_gateway { 'dev-igw':
  ensure => absent,
  region => 'us-west-1',
} ~>

# 4th - Destroy Subnets from multizone setup
ec2_vpc_subnet { 'dev-subnet-1a':
  ensure            => absent,
  region            => 'us-west-1',
} ~>

ec2_vpc_subnet { 'dev-subnet-1b':
  ensure            => absent,
  region            => 'us-west-1',
} ~>

# 5th - Destroy Routetables
ec2_vpc_routetable { 'dev-routes':
  ensure => absent,
  region => 'us-west-1',
} ~>

# Last - Destroy VPC at last since it is the 1st creation for ENV
ec2_vpc { 'dev-vpc':
  ensure       => absent,
  region       => 'us-west-1',
}
###########################################################################	
	
	
	
	
#############################
### SSL Cert Register AWS ###
#############################
20. Upload the pem key to AWS Cert management

	$ aws iam upload-server-certificate --server-certificate-name namcowireless.com\ 
      --certificate-body file://ssl_cert.pem\
	  --private-key file://namco.private.pem\
	  --certificate-chain  file://InterCA.pem

Output from aws iam upload command above
###########################################################################################
{
    "ServerCertificateMetadata": {
        "Arn": "arn:aws:iam::072077179845:server-certificate/namcowireless.com",
        "Path": "/",
        "UploadDate": "2016-09-09T00:57:39.297Z",
        "ServerCertificateId": "ASCAJCOK6N66FQIHGLZR6",
        "ServerCertificateName": "namcowireless.com"
    }
}
##########################################################################################




############# Modules install ################
1. 
	$ cd /etc/puppet/environments/production/modules/
	$ puppet module generate apark-mediawiki --environment production
### Output
----------------------------------------
{
  "name": "apark-mediawiki",
  "version": "0.1.0",
  "author": "apark",
  "summary": "install and configure MediaWiki",
  "license": "Apache 2.0",
  "source": "",
  "project_page": null,
  "issues_url": null,
  "dependencies": [
    {"name":"puppetlabs-stdlib","version_requirement":">= 1.0.0"}
  ]
}
----------------------------------------

About to generate this metadata; continue? [n/Y]
-->

Notice: Generating module at /etc/puppet/environments/production/modules/apark-mediawiki...
Notice: Populating templates...
Finished; module generated in apark-mediawiki.
apark-mediawiki/manifests
apark-mediawiki/manifests/init.pp
apark-mediawiki/metadata.json
apark-mediawiki/tests
apark-mediawiki/tests/init.pp
apark-mediawiki/Rakefile
apark-mediawiki/Gemfile
apark-mediawiki/spec
apark-mediawiki/spec/classes
apark-mediawiki/spec/classes/init_spec.rb
apark-mediawiki/spec/spec_he
####

	$ mv apark-mediawiki mediawiki
	$ vi /etc/puppet/environments/production/modules/mediawiki/manifests/init.pp
###
class mediawiki {


}

###
	# Module directory structures
	** module name **
		- manifests
			=> init.pp  
			classes mediawiki {
			}	
		- files
			=> static files
		- templates
			=> static & dynamic contents
		- lib
			=> custom facts  
			$osfamily
		- facts.d
			=> external facts e.g. executable
		- tests
		- spec

### Custom modules
e.g. PHP-MySQL
	Ubuntu			CentOS
	php5-mysql      php-mysql

	Installing PHP-MySQL using a selector
		$ vi /etc/puppet/environments/production/modules/mediawiki/manifests/init.pp
###	
class mediawiki {
  $phpmysql = $osfamily ? {
    'redhat' => 'php-mysql',
    'debian' => 'php5-mysql',
    default  => 'php-mysql',
  }
  package { $phpmysql:
    ensure -> 'present',
  }
}
###

$vi /etc/puppet/environments/production/manifests/nodes.pp


Invoking the mediawiki Class
###
class { 'mediawiki': }
###


		
IPtables modules
	$ puppet module install puppetlabs/firewall
	
	

 


### Puppet code parser command ###

$ puppet parser validate stg4.pp





















	
	
	
			
		
############################
### Puppet Windows Agent ###
############################
1. Download Windows Agent 
	https://downloads.puppetlabs.com/windows
	puppet-3.8.7-x64.msi 26-Apr-2016 11:19  16M   <= Should be same or lower than Puppet Master 3.8.7 version
		
2. Hosts file set up for puppet master address
	c:/windows/system32/drivers/etc/hosts <= open using notepad
		192.168.232.137 pm       <= puppet master address and hostname lookup
	
3. Change Windows Hostname change to new_name


4. Install and generating Agent Cert
	WIndows Powershell
	> puppet agent --version
	3.8.7
	Run C:\Program Files\Puppet Labs\Puppet\bin\puppet_interactive
	

6. SSL location
	#Enable Hiden folder for viewable from Control Panel first
	C:\ProgramData\PuppetLabs\puppet\etc\ssl

	# Delete "ssl" folder and run puppet_interactive for clear & regenerate the cert!

Manual command from Powershell
	> puppet resource service w32time 
	service { 'w32time':
	  ensure => 'stopped',
	  enable => 'manual',
	}
	> puppet resource service w32time enable=true(stopped) ensure=running(manual)
	service { 'w32time':
	  ensure => 'running',
	  enable => 'true',
	}




	

7. Creating a hiera file
	$ vi /var/lib/hiera/winadmin.yaml
### add this code
---
classes:
  - roles::windows-admin
###

8. create nodes.pp
	$vi production/manifests/nodes.pp
###
node 'winadmin' {
  hiera_include('classes')
}
###

### A Role invokes one or more Profiles ###

				Roles::Windows-admin			<= :: seperator
______________________|_______________________
		|              		        		  |				
Profiles::windows::mysql-workbench	Profiles::windows::putty     							

9. Creating a module
	$ cd /etc/puppet/environments/production/modules/
	$ puppet module generate apark-roles --environment production
####
----------------------------------------
{
  "name": "apark-roles",
  "version": "0.1.0",
  "author": "apark",
  "summary": "Roles module",
  "license": "Apache 2.0",
  "source": "",
  "project_page": null,
  "issues_url": null,
  "dependencies": [
    {"name":"puppetlabs-stdlib","version_requirement":">= 1.0.0"}
  ]
}
----------------------------------------
### About to generate this metadata; continue? [n/Y]
-->
Notice: Generating module at /etc/puppet/environments/production/apark-roles...
Notice: Populating templates...
Finished; module generated in apark-roles.
apark-roles/manifests
apark-roles/manifests/init.pp
apark-roles/metadata.json
apark-roles/tests
apark-roles/tests/init.pp
apark-roles/Rakefile
apark-roles/Gemfile
apark-roles/spec
apark-roles/spec/classes
apark-roles/spec/classes/init_spec.rb
apark-roles/spec/spec_helper.rb
apark-roles/README.md
####
8. Rename to roles
	$ mv apark-roles/ roles

	
9. Creating Profile modules
	$ cd /etc/puppet/environments/production/modules/
	$ puppet module generate apark-profiles --environment production
	
	How would you describe this module in a single sentence?
	--> Profiles module

----------------------------------------
{
  "name": "apark-profiles",
  "version": "0.1.0",
  "author": "apark",
  "summary": "Profiles module",
  "license": "Apache 2.0",
  "source": "",
  "project_page": null,
  "issues_url": null,
  "dependencies": [
    {"name":"puppetlabs-stdlib","version_requirement":">= 1.0.0"}
  ]
}
----------------------------------------

About to generate this metadata; continue? [n/Y]
-->

Notice: Generating module at /etc/puppet/environments/production/apark-profiles...
Notice: Populating templates...
Finished; module generated in apark-profiles.
apark-profiles/manifests
apark-profiles/manifests/init.pp
apark-profiles/metadata.json
apark-profiles/tests
apark-profiles/tests/init.pp
apark-profiles/Rakefile
apark-profiles/Gemfile
apark-profiles/spec
apark-profiles/spec/classes
apark-profiles/spec/classes/init_spec.rb
apark-profiles/spec/spec_helper.rb
apark-profiles/README.md

# Rename profiles 
	$ mv apark-profiles/ profiles


10. edit manifests file
	$ vi /etc/puppet/environments/production/modules/profiles/manifests/init.pp

### add bottom of the init.pp file ###
class profiles::windows::mysql-workbench {
}

class profiles::windows::putty {
}
###


11. Edit Roles 
	$ vi /etc/puppet/environments/production/modules/roles/manifests/init.pp

### add to bottom of the init.pp file ###
class roles::windows-admin {
  class { 'profiles::windows::mysql-workbench':}
  class { 'profiles::windows::putty':}
}
###

11. Managing Files and Packages
	$ puppet resource package   <= check current state list to new manifest(copy as working version) 
	
	# Download module
	$ puppet module install opentable-download_file --modulepath /etc/puppet/environments/production/moudles/
### output ###
/etc/puppet/environments/production/moudles
└─┬ opentable-download_file (v999.999.999)
  ├── puppetlabs-powershell (v2.0.2)
  └── puppetlabs-stdlib (v4.12.0)
###

	# Manually download dependency for windows.

12. 
	$vi /etc/puppet/environment/production/modules/manifests/init.pp
### add file location ###  https://github.com/benpiper/puppet-fundamentals-lab/blob/master/links.md

class profiles::windows::mysql-workbench {
  file { 'c:/temp/':
    ensure                => 'directory',
  }

  download_file { "Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.30501":
    url                   => 'http://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe',
    destination_directory => 'c:\temp',
  }

  package { "Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.30501":
    ensure         => 'installed',
    source         => 'c:\temp\vcredist_x64.exe',
    install_option => ['/quiet'],
  }


  download_file { "Microsoft .NET Framework 4 Client Profile":
    url                   => 'http://download.microsoft.com/download/5/6/2/562A10F9-C9F4-4313-A044-9C94E0A8FAC8/dotNetFx40_Client_x86_x64.exe',
    destination_directory => 'c:\temp',
  }

  package { "Microsoft .NET Framework 4 Client Profile":
    ensure         => 'installed',
    source         => 'c:\temp\dotNetFx40_Client_x86_x64.exe',
    install_option => ['/q'],
  }


  download_file { "Microsoft Workbench 6.2 CE":
    url                   => 'http://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-workbench-community-6.2.4-winx64.msi',
    destination_directory => 'c:\temp',
  }

  package { "Microsoft Workbench 6.2 CE":
    ensure         => 'installed',
    source         => 'c:\temp\mysql-workbench-community-6.2.4-winx64.msi',
    install_option => ['/q'],
  }

}


class profiles::windows::putty {

  file { 'c:/admin tools/':
    ensure                 => 'directory',
  }

  download_file { "Download putty":
    url                    => 'http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe',
    destination_directory  =>'c:\admin tools',
  }

  download_file { "Download puttygen":
    url                    => 'http://the.earth.li/~sgtatham/putty/latest/x86/puttygen.exe',
    destination_directory  =>'c:\admin tools',
  }
}
#####################




############### ###############
### Creating GIT repository ###
###############################
1. Initial Setup 
	$ cd /etc/puppet/code/environments/production
	$ git init
	$ git add .
	$ git commit -m "Initial commit"
	
	
2.	*** mistaken changes and commit" 
	$ git add .
	$ git commit -m "mistake or not working version commit"

3.	### Check the last log or broken code log
	$ git log
	
4.	### Revert last commit
	$ sudo git revert --no-edit commit 9ef4f7b99ad59d867f9425e7cc725f8f6b4be3b9  <= last commit (--no-edit <= no VI)
	
5. Recovering from Uncommitted mistakes
	## you changed something but no committed yet.
	$ git diff
	
	$ git reset HEAD --hard  		<= hard reset since last commit




	
#############################
### Foreman  ###
#############################


	
########################################################################	
### CentOS7 Puppet server install ###	
#######################################################################
	$ timedatectl set-timezone UTC	
###############################################################
### CentOS 7 Puppet 4.7 JAVA memory allocation
	If puppetserver failed to start on low memory

	$ systemctl status puppetserver.service
	$ journalctl -xe
	
### Configure Memory Allocation
### Puppet Server is configured to use 2 GB of RAM
	$ sudo vi /etc/sysconfig/puppetserver

	JAVA_ARGS="-Xms512m -Xmx512m"       <= change from 2G to 512mb

	$ sudo systemctl start puppetserver
###############################################################
CentOS7


$ sudo timedatectl set-timezone America/Los_Angeles
$ sudo yum -y install ntp
$ sudo ntpdate pool.ntp.org
$ sudo vi /etc/ntp.conf
###
server 0.us.pool.ntp.org
server 1.us.pool.ntp.org
server 2.us.pool.ntp.org
server 3.us.pool.ntp.org
###

$ sudo systemctl restart ntpd
$ sudo systemctl enable ntpd

#####################################################################
###Install Puppet, Foreman, SmartProxy Server
### Puppet 4.7
######################################################################
$ rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm

### Foreman 1.12

$ yum -y install epel-release https://yum.theforeman.org/releases/1.12/el7/x86_64/foreman-release.rpm
$ yum -y install foreman-installer
$ foreman-installer


### Output from foreman-installer $$$

 Systemd start for puppetserver failed!
 /Stage[main]/Puppet::Server::Service/Service[puppetserver]/ensure: change from stopped to running fai                led: Systemd start for puppetserver failed!
Installing             Done                                               [100%] [...................]
  Something went wrong! Check the log for ERROR-level output
  * Foreman is running at https://wput-puppet.namcowireless.com
      Initial credentials are admin / 9Hfe5wr9gXJTvjMz
  * Foreman Proxy is running at https://wput-puppet.namcowireless.com:8443
  * Puppetmaster is running at port 8140
  The full log is at /var/log/foreman-installer/foreman.log
###

### Check Puppet version
	# if failed to look puppet,
	$ export PATH=$PATH:/opt/puppetlabs/bin
	$ puppet -V 
		4.7.0
	$ systemctl status puppet 
	$ systemctl status puppetserver
	$ systemctl enable puppet
    $ systemctl enable puppetserver
 	
	
	$ puppet agent -t --debug --verbose
	$ vi /etc/puppetlabs/puppet/puppet.conf
###
[agent]
server = puppet_master_IP
###


 
### Puppet Agent -t error
	# Error: Could not request certificate: Server hostname 'pm' did not match server certificate; 
	# Edit on server
	$ vi /etc/puppetlabs/puppet/puppet.conf
	### override
	certname = pm
	dns_alt_names = pm,pm.localdomain
	###
		$ systemctl restart puppetserver 

### Revert changes on client CentOS7  ###
$ puppet filebucket -l --bucket /opt/puppetlabs/puppet/cache/clientbucket/ restore /var/www/html/index.html 186c64b052c8fafdad721cb778a7bf4a
### REVIEW  using get ###
$ puppet filebucket -l --bucket /opt/puppetlabs/puppet/cache/clientbucket/ get /var/www/html/index.html 186c64b052c8fafdad721cb778a7bf4a




###############################################################
### CentOS 7 Puppet 4.7 JAVA memory allocation
	If puppetserver failed to start on low memory

	$ systemctl status puppetserver.service
	$ journalctl -xe
	
### Configure Memory Allocation
### Puppet Server is configured to use 2 GB of RAM
	$ sudo vi /etc/sysconfig/puppetserver

	JAVA_ARGS="-Xms512m -Xmx512m"       <= change from 2G to 512mb

	$ sudo systemctl start puppetserver
###############################################################


### NTP Module install on U14
$ sudo puppet module install -i /etc/puppet/environments/production/modules puppetlabs/ntp
### NTP Module install on C7
$ sudo puppet module install -i /etc/puppetlabs/code/environments/production/modules/ puppetlabs/ntp





